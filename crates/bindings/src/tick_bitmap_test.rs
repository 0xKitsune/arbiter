pub use tick_bitmap_test::*;
/// This module was auto-generated with ethers-rs Abigen.
/// More information at: <https://github.com/gakonst/ethers-rs>
#[allow(
    clippy::enum_variant_names,
    clippy::too_many_arguments,
    clippy::upper_case_acronyms,
    clippy::type_complexity,
    dead_code,
    non_camel_case_types
)]
pub mod tick_bitmap_test {
    #[rustfmt::skip]
    const __ABI: &str = "[{\"inputs\":[{\"internalType\":\"int16\",\"name\":\"\",\"type\":\"int16\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"bitmap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"flipTick\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"getGasCostOfFlipTick\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\",\"components\":[]},{\"internalType\":\"bool\",\"name\":\"lte\",\"type\":\"bool\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"getGasCostOfNextInitializedTickWithinOneWord\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"isInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\",\"components\":[]},{\"internalType\":\"bool\",\"name\":\"lte\",\"type\":\"bool\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"nextInitializedTickWithinOneWord\",\"outputs\":[{\"internalType\":\"int24\",\"name\":\"next\",\"type\":\"int24\",\"components\":[]},{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\",\"components\":[]}]}]";
    ///The parsed JSON ABI of the contract.
    pub static TICKBITMAPTEST_ABI: ::ethers::contract::Lazy<::ethers::core::abi::Abi> =
        ::ethers::contract::Lazy::new(|| {
            ::ethers::core::utils::__serde_json::from_str(__ABI).expect("ABI is always valid")
        });
    #[rustfmt::skip]
    const __BYTECODE: &[u8] = &[
        96,
        128,
        96,
        64,
        82,
        52,
        128,
        21,
        97,
        0,
        16,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        97,
        5,
        174,
        128,
        97,
        0,
        32,
        96,
        0,
        57,
        96,
        0,
        243,
        254,
        96,
        128,
        96,
        64,
        82,
        52,
        128,
        21,
        97,
        0,
        16,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        96,
        4,
        54,
        16,
        97,
        0,
        98,
        87,
        96,
        0,
        53,
        96,
        224,
        28,
        128,
        99,
        43,
        220,
        47,
        211,
        20,
        97,
        0,
        103,
        87,
        128,
        99,
        62,
        123,
        162,
        40,
        20,
        97,
        0,
        155,
        87,
        128,
        99,
        63,
        252,
        129,
        238,
        20,
        97,
        0,
        225,
        87,
        128,
        99,
        136,
        21,
        145,
        47,
        20,
        97,
        1,
        19,
        87,
        128,
        99,
        240,
        75,
        201,
        67,
        20,
        97,
        1,
        53,
        87,
        128,
        99,
        240,
        252,
        146,
        36,
        20,
        97,
        1,
        85,
        87,
        91,
        96,
        0,
        128,
        253,
        91,
        97,
        0,
        135,
        96,
        4,
        128,
        54,
        3,
        96,
        32,
        129,
        16,
        21,
        97,
        0,
        125,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        53,
        96,
        2,
        11,
        97,
        1,
        125,
        86,
        91,
        96,
        64,
        128,
        81,
        145,
        21,
        21,
        130,
        82,
        81,
        144,
        129,
        144,
        3,
        96,
        32,
        1,
        144,
        243,
        91,
        97,
        0,
        195,
        96,
        4,
        128,
        54,
        3,
        96,
        64,
        129,
        16,
        21,
        97,
        0,
        177,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        128,
        53,
        96,
        2,
        11,
        144,
        96,
        32,
        1,
        53,
        21,
        21,
        97,
        1,
        178,
        86,
        91,
        96,
        64,
        128,
        81,
        96,
        2,
        147,
        144,
        147,
        11,
        131,
        82,
        144,
        21,
        21,
        96,
        32,
        131,
        1,
        82,
        128,
        81,
        145,
        130,
        144,
        3,
        1,
        144,
        243,
        91,
        97,
        1,
        1,
        96,
        4,
        128,
        54,
        3,
        96,
        32,
        129,
        16,
        21,
        97,
        0,
        247,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        53,
        96,
        1,
        11,
        97,
        1,
        205,
        86,
        91,
        96,
        64,
        128,
        81,
        145,
        130,
        82,
        81,
        144,
        129,
        144,
        3,
        96,
        32,
        1,
        144,
        243,
        91,
        97,
        1,
        51,
        96,
        4,
        128,
        54,
        3,
        96,
        32,
        129,
        16,
        21,
        97,
        1,
        41,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        53,
        96,
        2,
        11,
        97,
        1,
        223,
        86,
        91,
        0,
        91,
        97,
        1,
        1,
        96,
        4,
        128,
        54,
        3,
        96,
        32,
        129,
        16,
        21,
        97,
        1,
        75,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        53,
        96,
        2,
        11,
        97,
        1,
        239,
        86,
        91,
        97,
        1,
        1,
        96,
        4,
        128,
        54,
        3,
        96,
        64,
        129,
        16,
        21,
        97,
        1,
        107,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        128,
        53,
        96,
        2,
        11,
        144,
        96,
        32,
        1,
        53,
        21,
        21,
        97,
        2,
        11,
        86,
        91,
        96,
        0,
        128,
        128,
        97,
        1,
        142,
        129,
        133,
        96,
        1,
        128,
        97,
        2,
        43,
        86,
        91,
        145,
        80,
        145,
        80,
        131,
        96,
        2,
        11,
        130,
        96,
        2,
        11,
        20,
        97,
        1,
        166,
        87,
        96,
        0,
        97,
        1,
        168,
        86,
        91,
        128,
        91,
        146,
        80,
        80,
        80,
        91,
        145,
        144,
        80,
        86,
        91,
        96,
        0,
        128,
        97,
        1,
        194,
        129,
        133,
        96,
        1,
        134,
        97,
        2,
        43,
        86,
        91,
        145,
        80,
        145,
        80,
        146,
        80,
        146,
        144,
        80,
        86,
        91,
        96,
        0,
        96,
        32,
        129,
        144,
        82,
        144,
        129,
        82,
        96,
        64,
        144,
        32,
        84,
        129,
        86,
        91,
        97,
        1,
        236,
        96,
        0,
        130,
        96,
        1,
        97,
        3,
        109,
        86,
        91,
        80,
        86,
        91,
        96,
        0,
        128,
        90,
        144,
        80,
        97,
        2,
        2,
        96,
        0,
        132,
        96,
        1,
        97,
        3,
        109,
        86,
        91,
        90,
        144,
        3,
        146,
        145,
        80,
        80,
        86,
        91,
        96,
        0,
        128,
        90,
        144,
        80,
        97,
        2,
        31,
        96,
        0,
        133,
        96,
        1,
        134,
        97,
        2,
        43,
        86,
        91,
        80,
        80,
        90,
        144,
        3,
        147,
        146,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        128,
        96,
        0,
        132,
        96,
        2,
        11,
        134,
        96,
        2,
        11,
        129,
        97,
        2,
        63,
        87,
        254,
        91,
        5,
        144,
        80,
        96,
        0,
        134,
        96,
        2,
        11,
        18,
        128,
        21,
        97,
        2,
        102,
        87,
        80,
        132,
        96,
        2,
        11,
        134,
        96,
        2,
        11,
        129,
        97,
        2,
        95,
        87,
        254,
        91,
        7,
        96,
        2,
        11,
        21,
        21,
        91,
        21,
        97,
        2,
        112,
        87,
        96,
        0,
        25,
        1,
        91,
        131,
        21,
        97,
        2,
        229,
        87,
        96,
        0,
        128,
        97,
        2,
        130,
        131,
        97,
        3,
        211,
        86,
        91,
        96,
        1,
        130,
        129,
        11,
        129,
        11,
        96,
        0,
        144,
        129,
        82,
        96,
        32,
        141,
        144,
        82,
        96,
        64,
        144,
        32,
        84,
        96,
        255,
        131,
        22,
        145,
        144,
        145,
        27,
        128,
        1,
        96,
        0,
        25,
        1,
        144,
        129,
        22,
        128,
        21,
        21,
        151,
        80,
        146,
        148,
        80,
        144,
        146,
        80,
        144,
        133,
        97,
        2,
        199,
        87,
        136,
        131,
        96,
        255,
        22,
        134,
        3,
        2,
        97,
        2,
        218,
        86,
        91,
        136,
        97,
        2,
        209,
        130,
        97,
        3,
        229,
        86,
        91,
        132,
        3,
        96,
        255,
        22,
        134,
        3,
        2,
        91,
        150,
        80,
        80,
        80,
        80,
        80,
        97,
        3,
        99,
        86,
        91,
        96,
        0,
        128,
        97,
        2,
        244,
        131,
        96,
        1,
        1,
        97,
        3,
        211,
        86,
        91,
        145,
        80,
        145,
        80,
        96,
        0,
        96,
        1,
        130,
        96,
        255,
        22,
        96,
        1,
        144,
        27,
        3,
        25,
        144,
        80,
        96,
        0,
        129,
        139,
        96,
        0,
        134,
        96,
        1,
        11,
        96,
        1,
        11,
        129,
        82,
        96,
        32,
        1,
        144,
        129,
        82,
        96,
        32,
        1,
        96,
        0,
        32,
        84,
        22,
        144,
        80,
        128,
        96,
        0,
        20,
        21,
        149,
        80,
        133,
        97,
        3,
        70,
        87,
        136,
        131,
        96,
        255,
        3,
        96,
        255,
        22,
        134,
        96,
        1,
        1,
        1,
        2,
        97,
        3,
        92,
        86,
        91,
        136,
        131,
        97,
        3,
        81,
        131,
        97,
        4,
        133,
        86,
        91,
        3,
        96,
        255,
        22,
        134,
        96,
        1,
        1,
        1,
        2,
        91,
        150,
        80,
        80,
        80,
        80,
        80,
        91,
        80,
        148,
        80,
        148,
        146,
        80,
        80,
        80,
        86,
        91,
        128,
        96,
        2,
        11,
        130,
        96,
        2,
        11,
        129,
        97,
        3,
        124,
        87,
        254,
        91,
        7,
        96,
        2,
        11,
        21,
        97,
        3,
        138,
        87,
        96,
        0,
        128,
        253,
        91,
        96,
        0,
        128,
        97,
        3,
        165,
        131,
        96,
        2,
        11,
        133,
        96,
        2,
        11,
        129,
        97,
        3,
        159,
        87,
        254,
        91,
        5,
        97,
        3,
        211,
        86,
        91,
        96,
        1,
        145,
        130,
        11,
        130,
        11,
        96,
        0,
        144,
        129,
        82,
        96,
        32,
        151,
        144,
        151,
        82,
        96,
        64,
        144,
        150,
        32,
        128,
        84,
        96,
        255,
        144,
        151,
        22,
        145,
        144,
        145,
        27,
        144,
        149,
        24,
        144,
        148,
        85,
        80,
        80,
        80,
        80,
        86,
        91,
        96,
        2,
        11,
        96,
        8,
        129,
        144,
        29,
        145,
        97,
        1,
        0,
        144,
        145,
        7,
        144,
        86,
        91,
        96,
        0,
        128,
        130,
        17,
        97,
        3,
        243,
        87,
        96,
        0,
        128,
        253,
        91,
        96,
        1,
        96,
        128,
        27,
        130,
        16,
        97,
        4,
        6,
        87,
        96,
        128,
        145,
        130,
        28,
        145,
        1,
        91,
        104,
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        130,
        16,
        97,
        4,
        30,
        87,
        96,
        64,
        145,
        130,
        28,
        145,
        1,
        91,
        100,
        1,
        0,
        0,
        0,
        0,
        130,
        16,
        97,
        4,
        50,
        87,
        96,
        32,
        145,
        130,
        28,
        145,
        1,
        91,
        98,
        1,
        0,
        0,
        130,
        16,
        97,
        4,
        68,
        87,
        96,
        16,
        145,
        130,
        28,
        145,
        1,
        91,
        97,
        1,
        0,
        130,
        16,
        97,
        4,
        85,
        87,
        96,
        8,
        145,
        130,
        28,
        145,
        1,
        91,
        96,
        16,
        130,
        16,
        97,
        4,
        101,
        87,
        96,
        4,
        145,
        130,
        28,
        145,
        1,
        91,
        96,
        4,
        130,
        16,
        97,
        4,
        117,
        87,
        96,
        2,
        145,
        130,
        28,
        145,
        1,
        91,
        96,
        2,
        130,
        16,
        97,
        1,
        173,
        87,
        96,
        1,
        1,
        145,
        144,
        80,
        86,
        91,
        96,
        0,
        128,
        130,
        17,
        97,
        4,
        147,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        96,
        255,
        111,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        130,
        22,
        21,
        97,
        4,
        183,
        87,
        96,
        127,
        25,
        1,
        97,
        4,
        191,
        86,
        91,
        96,
        128,
        130,
        144,
        28,
        145,
        80,
        91,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        130,
        22,
        21,
        97,
        4,
        216,
        87,
        96,
        63,
        25,
        1,
        97,
        4,
        224,
        86,
        91,
        96,
        64,
        130,
        144,
        28,
        145,
        80,
        91,
        99,
        255,
        255,
        255,
        255,
        130,
        22,
        21,
        97,
        4,
        245,
        87,
        96,
        31,
        25,
        1,
        97,
        4,
        253,
        86,
        91,
        96,
        32,
        130,
        144,
        28,
        145,
        80,
        91,
        97,
        255,
        255,
        130,
        22,
        21,
        97,
        5,
        16,
        87,
        96,
        15,
        25,
        1,
        97,
        5,
        24,
        86,
        91,
        96,
        16,
        130,
        144,
        28,
        145,
        80,
        91,
        96,
        255,
        130,
        22,
        21,
        97,
        5,
        42,
        87,
        96,
        7,
        25,
        1,
        97,
        5,
        50,
        86,
        91,
        96,
        8,
        130,
        144,
        28,
        145,
        80,
        91,
        96,
        15,
        130,
        22,
        21,
        97,
        5,
        68,
        87,
        96,
        3,
        25,
        1,
        97,
        5,
        76,
        86,
        91,
        96,
        4,
        130,
        144,
        28,
        145,
        80,
        91,
        96,
        3,
        130,
        22,
        21,
        97,
        5,
        94,
        87,
        96,
        1,
        25,
        1,
        97,
        5,
        102,
        86,
        91,
        96,
        2,
        130,
        144,
        28,
        145,
        80,
        91,
        96,
        1,
        130,
        22,
        21,
        97,
        1,
        173,
        87,
        96,
        0,
        25,
        1,
        145,
        144,
        80,
        86,
        254,
        162,
        100,
        105,
        112,
        102,
        115,
        88,
        34,
        18,
        32,
        94,
        29,
        136,
        123,
        17,
        178,
        95,
        209,
        109,
        148,
        131,
        72,
        93,
        17,
        3,
        218,
        58,
        195,
        201,
        196,
        4,
        34,
        137,
        173,
        151,
        246,
        169,
        208,
        64,
        77,
        86,
        82,
        100,
        115,
        111,
        108,
        99,
        67,
        0,
        7,
        6,
        0,
        51,
    ];
    ///The bytecode of the contract.
    pub static TICKBITMAPTEST_BYTECODE: ::ethers::core::types::Bytes =
        ::ethers::core::types::Bytes::from_static(__BYTECODE);
    #[rustfmt::skip]
    const __DEPLOYED_BYTECODE: &[u8] = &[
        96,
        128,
        96,
        64,
        82,
        52,
        128,
        21,
        97,
        0,
        16,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        96,
        4,
        54,
        16,
        97,
        0,
        98,
        87,
        96,
        0,
        53,
        96,
        224,
        28,
        128,
        99,
        43,
        220,
        47,
        211,
        20,
        97,
        0,
        103,
        87,
        128,
        99,
        62,
        123,
        162,
        40,
        20,
        97,
        0,
        155,
        87,
        128,
        99,
        63,
        252,
        129,
        238,
        20,
        97,
        0,
        225,
        87,
        128,
        99,
        136,
        21,
        145,
        47,
        20,
        97,
        1,
        19,
        87,
        128,
        99,
        240,
        75,
        201,
        67,
        20,
        97,
        1,
        53,
        87,
        128,
        99,
        240,
        252,
        146,
        36,
        20,
        97,
        1,
        85,
        87,
        91,
        96,
        0,
        128,
        253,
        91,
        97,
        0,
        135,
        96,
        4,
        128,
        54,
        3,
        96,
        32,
        129,
        16,
        21,
        97,
        0,
        125,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        53,
        96,
        2,
        11,
        97,
        1,
        125,
        86,
        91,
        96,
        64,
        128,
        81,
        145,
        21,
        21,
        130,
        82,
        81,
        144,
        129,
        144,
        3,
        96,
        32,
        1,
        144,
        243,
        91,
        97,
        0,
        195,
        96,
        4,
        128,
        54,
        3,
        96,
        64,
        129,
        16,
        21,
        97,
        0,
        177,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        128,
        53,
        96,
        2,
        11,
        144,
        96,
        32,
        1,
        53,
        21,
        21,
        97,
        1,
        178,
        86,
        91,
        96,
        64,
        128,
        81,
        96,
        2,
        147,
        144,
        147,
        11,
        131,
        82,
        144,
        21,
        21,
        96,
        32,
        131,
        1,
        82,
        128,
        81,
        145,
        130,
        144,
        3,
        1,
        144,
        243,
        91,
        97,
        1,
        1,
        96,
        4,
        128,
        54,
        3,
        96,
        32,
        129,
        16,
        21,
        97,
        0,
        247,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        53,
        96,
        1,
        11,
        97,
        1,
        205,
        86,
        91,
        96,
        64,
        128,
        81,
        145,
        130,
        82,
        81,
        144,
        129,
        144,
        3,
        96,
        32,
        1,
        144,
        243,
        91,
        97,
        1,
        51,
        96,
        4,
        128,
        54,
        3,
        96,
        32,
        129,
        16,
        21,
        97,
        1,
        41,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        53,
        96,
        2,
        11,
        97,
        1,
        223,
        86,
        91,
        0,
        91,
        97,
        1,
        1,
        96,
        4,
        128,
        54,
        3,
        96,
        32,
        129,
        16,
        21,
        97,
        1,
        75,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        53,
        96,
        2,
        11,
        97,
        1,
        239,
        86,
        91,
        97,
        1,
        1,
        96,
        4,
        128,
        54,
        3,
        96,
        64,
        129,
        16,
        21,
        97,
        1,
        107,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        128,
        53,
        96,
        2,
        11,
        144,
        96,
        32,
        1,
        53,
        21,
        21,
        97,
        2,
        11,
        86,
        91,
        96,
        0,
        128,
        128,
        97,
        1,
        142,
        129,
        133,
        96,
        1,
        128,
        97,
        2,
        43,
        86,
        91,
        145,
        80,
        145,
        80,
        131,
        96,
        2,
        11,
        130,
        96,
        2,
        11,
        20,
        97,
        1,
        166,
        87,
        96,
        0,
        97,
        1,
        168,
        86,
        91,
        128,
        91,
        146,
        80,
        80,
        80,
        91,
        145,
        144,
        80,
        86,
        91,
        96,
        0,
        128,
        97,
        1,
        194,
        129,
        133,
        96,
        1,
        134,
        97,
        2,
        43,
        86,
        91,
        145,
        80,
        145,
        80,
        146,
        80,
        146,
        144,
        80,
        86,
        91,
        96,
        0,
        96,
        32,
        129,
        144,
        82,
        144,
        129,
        82,
        96,
        64,
        144,
        32,
        84,
        129,
        86,
        91,
        97,
        1,
        236,
        96,
        0,
        130,
        96,
        1,
        97,
        3,
        109,
        86,
        91,
        80,
        86,
        91,
        96,
        0,
        128,
        90,
        144,
        80,
        97,
        2,
        2,
        96,
        0,
        132,
        96,
        1,
        97,
        3,
        109,
        86,
        91,
        90,
        144,
        3,
        146,
        145,
        80,
        80,
        86,
        91,
        96,
        0,
        128,
        90,
        144,
        80,
        97,
        2,
        31,
        96,
        0,
        133,
        96,
        1,
        134,
        97,
        2,
        43,
        86,
        91,
        80,
        80,
        90,
        144,
        3,
        147,
        146,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        128,
        96,
        0,
        132,
        96,
        2,
        11,
        134,
        96,
        2,
        11,
        129,
        97,
        2,
        63,
        87,
        254,
        91,
        5,
        144,
        80,
        96,
        0,
        134,
        96,
        2,
        11,
        18,
        128,
        21,
        97,
        2,
        102,
        87,
        80,
        132,
        96,
        2,
        11,
        134,
        96,
        2,
        11,
        129,
        97,
        2,
        95,
        87,
        254,
        91,
        7,
        96,
        2,
        11,
        21,
        21,
        91,
        21,
        97,
        2,
        112,
        87,
        96,
        0,
        25,
        1,
        91,
        131,
        21,
        97,
        2,
        229,
        87,
        96,
        0,
        128,
        97,
        2,
        130,
        131,
        97,
        3,
        211,
        86,
        91,
        96,
        1,
        130,
        129,
        11,
        129,
        11,
        96,
        0,
        144,
        129,
        82,
        96,
        32,
        141,
        144,
        82,
        96,
        64,
        144,
        32,
        84,
        96,
        255,
        131,
        22,
        145,
        144,
        145,
        27,
        128,
        1,
        96,
        0,
        25,
        1,
        144,
        129,
        22,
        128,
        21,
        21,
        151,
        80,
        146,
        148,
        80,
        144,
        146,
        80,
        144,
        133,
        97,
        2,
        199,
        87,
        136,
        131,
        96,
        255,
        22,
        134,
        3,
        2,
        97,
        2,
        218,
        86,
        91,
        136,
        97,
        2,
        209,
        130,
        97,
        3,
        229,
        86,
        91,
        132,
        3,
        96,
        255,
        22,
        134,
        3,
        2,
        91,
        150,
        80,
        80,
        80,
        80,
        80,
        97,
        3,
        99,
        86,
        91,
        96,
        0,
        128,
        97,
        2,
        244,
        131,
        96,
        1,
        1,
        97,
        3,
        211,
        86,
        91,
        145,
        80,
        145,
        80,
        96,
        0,
        96,
        1,
        130,
        96,
        255,
        22,
        96,
        1,
        144,
        27,
        3,
        25,
        144,
        80,
        96,
        0,
        129,
        139,
        96,
        0,
        134,
        96,
        1,
        11,
        96,
        1,
        11,
        129,
        82,
        96,
        32,
        1,
        144,
        129,
        82,
        96,
        32,
        1,
        96,
        0,
        32,
        84,
        22,
        144,
        80,
        128,
        96,
        0,
        20,
        21,
        149,
        80,
        133,
        97,
        3,
        70,
        87,
        136,
        131,
        96,
        255,
        3,
        96,
        255,
        22,
        134,
        96,
        1,
        1,
        1,
        2,
        97,
        3,
        92,
        86,
        91,
        136,
        131,
        97,
        3,
        81,
        131,
        97,
        4,
        133,
        86,
        91,
        3,
        96,
        255,
        22,
        134,
        96,
        1,
        1,
        1,
        2,
        91,
        150,
        80,
        80,
        80,
        80,
        80,
        91,
        80,
        148,
        80,
        148,
        146,
        80,
        80,
        80,
        86,
        91,
        128,
        96,
        2,
        11,
        130,
        96,
        2,
        11,
        129,
        97,
        3,
        124,
        87,
        254,
        91,
        7,
        96,
        2,
        11,
        21,
        97,
        3,
        138,
        87,
        96,
        0,
        128,
        253,
        91,
        96,
        0,
        128,
        97,
        3,
        165,
        131,
        96,
        2,
        11,
        133,
        96,
        2,
        11,
        129,
        97,
        3,
        159,
        87,
        254,
        91,
        5,
        97,
        3,
        211,
        86,
        91,
        96,
        1,
        145,
        130,
        11,
        130,
        11,
        96,
        0,
        144,
        129,
        82,
        96,
        32,
        151,
        144,
        151,
        82,
        96,
        64,
        144,
        150,
        32,
        128,
        84,
        96,
        255,
        144,
        151,
        22,
        145,
        144,
        145,
        27,
        144,
        149,
        24,
        144,
        148,
        85,
        80,
        80,
        80,
        80,
        86,
        91,
        96,
        2,
        11,
        96,
        8,
        129,
        144,
        29,
        145,
        97,
        1,
        0,
        144,
        145,
        7,
        144,
        86,
        91,
        96,
        0,
        128,
        130,
        17,
        97,
        3,
        243,
        87,
        96,
        0,
        128,
        253,
        91,
        96,
        1,
        96,
        128,
        27,
        130,
        16,
        97,
        4,
        6,
        87,
        96,
        128,
        145,
        130,
        28,
        145,
        1,
        91,
        104,
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        130,
        16,
        97,
        4,
        30,
        87,
        96,
        64,
        145,
        130,
        28,
        145,
        1,
        91,
        100,
        1,
        0,
        0,
        0,
        0,
        130,
        16,
        97,
        4,
        50,
        87,
        96,
        32,
        145,
        130,
        28,
        145,
        1,
        91,
        98,
        1,
        0,
        0,
        130,
        16,
        97,
        4,
        68,
        87,
        96,
        16,
        145,
        130,
        28,
        145,
        1,
        91,
        97,
        1,
        0,
        130,
        16,
        97,
        4,
        85,
        87,
        96,
        8,
        145,
        130,
        28,
        145,
        1,
        91,
        96,
        16,
        130,
        16,
        97,
        4,
        101,
        87,
        96,
        4,
        145,
        130,
        28,
        145,
        1,
        91,
        96,
        4,
        130,
        16,
        97,
        4,
        117,
        87,
        96,
        2,
        145,
        130,
        28,
        145,
        1,
        91,
        96,
        2,
        130,
        16,
        97,
        1,
        173,
        87,
        96,
        1,
        1,
        145,
        144,
        80,
        86,
        91,
        96,
        0,
        128,
        130,
        17,
        97,
        4,
        147,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        96,
        255,
        111,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        130,
        22,
        21,
        97,
        4,
        183,
        87,
        96,
        127,
        25,
        1,
        97,
        4,
        191,
        86,
        91,
        96,
        128,
        130,
        144,
        28,
        145,
        80,
        91,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        130,
        22,
        21,
        97,
        4,
        216,
        87,
        96,
        63,
        25,
        1,
        97,
        4,
        224,
        86,
        91,
        96,
        64,
        130,
        144,
        28,
        145,
        80,
        91,
        99,
        255,
        255,
        255,
        255,
        130,
        22,
        21,
        97,
        4,
        245,
        87,
        96,
        31,
        25,
        1,
        97,
        4,
        253,
        86,
        91,
        96,
        32,
        130,
        144,
        28,
        145,
        80,
        91,
        97,
        255,
        255,
        130,
        22,
        21,
        97,
        5,
        16,
        87,
        96,
        15,
        25,
        1,
        97,
        5,
        24,
        86,
        91,
        96,
        16,
        130,
        144,
        28,
        145,
        80,
        91,
        96,
        255,
        130,
        22,
        21,
        97,
        5,
        42,
        87,
        96,
        7,
        25,
        1,
        97,
        5,
        50,
        86,
        91,
        96,
        8,
        130,
        144,
        28,
        145,
        80,
        91,
        96,
        15,
        130,
        22,
        21,
        97,
        5,
        68,
        87,
        96,
        3,
        25,
        1,
        97,
        5,
        76,
        86,
        91,
        96,
        4,
        130,
        144,
        28,
        145,
        80,
        91,
        96,
        3,
        130,
        22,
        21,
        97,
        5,
        94,
        87,
        96,
        1,
        25,
        1,
        97,
        5,
        102,
        86,
        91,
        96,
        2,
        130,
        144,
        28,
        145,
        80,
        91,
        96,
        1,
        130,
        22,
        21,
        97,
        1,
        173,
        87,
        96,
        0,
        25,
        1,
        145,
        144,
        80,
        86,
        254,
        162,
        100,
        105,
        112,
        102,
        115,
        88,
        34,
        18,
        32,
        94,
        29,
        136,
        123,
        17,
        178,
        95,
        209,
        109,
        148,
        131,
        72,
        93,
        17,
        3,
        218,
        58,
        195,
        201,
        196,
        4,
        34,
        137,
        173,
        151,
        246,
        169,
        208,
        64,
        77,
        86,
        82,
        100,
        115,
        111,
        108,
        99,
        67,
        0,
        7,
        6,
        0,
        51,
    ];
    ///The deployed bytecode of the contract.
    pub static TICKBITMAPTEST_DEPLOYED_BYTECODE: ::ethers::core::types::Bytes =
        ::ethers::core::types::Bytes::from_static(__DEPLOYED_BYTECODE);
    pub struct TickBitmapTest<M>(::ethers::contract::Contract<M>);
    impl<M> ::core::clone::Clone for TickBitmapTest<M> {
        fn clone(&self) -> Self {
            Self(::core::clone::Clone::clone(&self.0))
        }
    }
    impl<M> ::core::ops::Deref for TickBitmapTest<M> {
        type Target = ::ethers::contract::Contract<M>;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl<M> ::core::ops::DerefMut for TickBitmapTest<M> {
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl<M> ::core::fmt::Debug for TickBitmapTest<M> {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple(stringify!(TickBitmapTest))
                .field(&self.address())
                .finish()
        }
    }
    impl<M: ::ethers::providers::Middleware> TickBitmapTest<M> {
        /// Creates a new contract instance with the specified `ethers` client at
        /// `address`. The contract derefs to a `ethers::Contract` object.
        pub fn new<T: Into<::ethers::core::types::Address>>(
            address: T,
            client: ::std::sync::Arc<M>,
        ) -> Self {
            Self(::ethers::contract::Contract::new(
                address.into(),
                TICKBITMAPTEST_ABI.clone(),
                client,
            ))
        }
        /// Constructs the general purpose `Deployer` instance based on the provided constructor arguments and sends it.
        /// Returns a new instance of a deployer that returns an instance of this contract after sending the transaction
        ///
        /// Notes:
        /// - If there are no constructor arguments, you should pass `()` as the argument.
        /// - The default poll duration is 7 seconds.
        /// - The default number of confirmations is 1 block.
        ///
        ///
        /// # Example
        ///
        /// Generate contract bindings with `abigen!` and deploy a new contract instance.
        ///
        /// *Note*: this requires a `bytecode` and `abi` object in the `greeter.json` artifact.
        ///
        /// ```ignore
        /// # async fn deploy<M: ethers::providers::Middleware>(client: ::std::sync::Arc<M>) {
        ///     abigen!(Greeter, "../greeter.json");
        ///
        ///    let greeter_contract = Greeter::deploy(client, "Hello world!".to_string()).unwrap().send().await.unwrap();
        ///    let msg = greeter_contract.greet().call().await.unwrap();
        /// # }
        /// ```
        pub fn deploy<T: ::ethers::core::abi::Tokenize>(
            client: ::std::sync::Arc<M>,
            constructor_args: T,
        ) -> ::core::result::Result<
            ::ethers::contract::builders::ContractDeployer<M, Self>,
            ::ethers::contract::ContractError<M>,
        > {
            let factory = ::ethers::contract::ContractFactory::new(
                TICKBITMAPTEST_ABI.clone(),
                TICKBITMAPTEST_BYTECODE.clone().into(),
                client,
            );
            let deployer = factory.deploy(constructor_args)?;
            let deployer = ::ethers::contract::ContractDeployer::new(deployer);
            Ok(deployer)
        }
        ///Calls the contract's `bitmap` (0x3ffc81ee) function
        pub fn bitmap(
            &self,
            p0: i16,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash([63, 252, 129, 238], p0)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `flipTick` (0x8815912f) function
        pub fn flip_tick(&self, tick: i32) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([136, 21, 145, 47], tick)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `getGasCostOfFlipTick` (0xf04bc943) function
        pub fn get_gas_cost_of_flip_tick(
            &self,
            tick: i32,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash([240, 75, 201, 67], tick)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `getGasCostOfNextInitializedTickWithinOneWord` (0xf0fc9224) function
        pub fn get_gas_cost_of_next_initialized_tick_within_one_word(
            &self,
            tick: i32,
            lte: bool,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash([240, 252, 146, 36], (tick, lte))
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `isInitialized` (0x2bdc2fd3) function
        pub fn is_initialized(
            &self,
            tick: i32,
        ) -> ::ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([43, 220, 47, 211], tick)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `nextInitializedTickWithinOneWord` (0x3e7ba228) function
        pub fn next_initialized_tick_within_one_word(
            &self,
            tick: i32,
            lte: bool,
        ) -> ::ethers::contract::builders::ContractCall<M, (i32, bool)> {
            self.0
                .method_hash([62, 123, 162, 40], (tick, lte))
                .expect("method not found (this should never happen)")
        }
    }
    impl<M: ::ethers::providers::Middleware> From<::ethers::contract::Contract<M>>
        for TickBitmapTest<M>
    {
        fn from(contract: ::ethers::contract::Contract<M>) -> Self {
            Self::new(contract.address(), contract.client())
        }
    }
    ///Container type for all input parameters for the `bitmap` function with signature `bitmap(int16)` and selector `0x3ffc81ee`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    #[ethcall(name = "bitmap", abi = "bitmap(int16)")]
    pub struct BitmapCall(pub i16);
    ///Container type for all input parameters for the `flipTick` function with signature `flipTick(int24)` and selector `0x8815912f`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    #[ethcall(name = "flipTick", abi = "flipTick(int24)")]
    pub struct FlipTickCall {
        pub tick: i32,
    }
    ///Container type for all input parameters for the `getGasCostOfFlipTick` function with signature `getGasCostOfFlipTick(int24)` and selector `0xf04bc943`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    #[ethcall(name = "getGasCostOfFlipTick", abi = "getGasCostOfFlipTick(int24)")]
    pub struct GetGasCostOfFlipTickCall {
        pub tick: i32,
    }
    ///Container type for all input parameters for the `getGasCostOfNextInitializedTickWithinOneWord` function with signature `getGasCostOfNextInitializedTickWithinOneWord(int24,bool)` and selector `0xf0fc9224`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    #[ethcall(
        name = "getGasCostOfNextInitializedTickWithinOneWord",
        abi = "getGasCostOfNextInitializedTickWithinOneWord(int24,bool)"
    )]
    pub struct GetGasCostOfNextInitializedTickWithinOneWordCall {
        pub tick: i32,
        pub lte: bool,
    }
    ///Container type for all input parameters for the `isInitialized` function with signature `isInitialized(int24)` and selector `0x2bdc2fd3`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    #[ethcall(name = "isInitialized", abi = "isInitialized(int24)")]
    pub struct IsInitializedCall {
        pub tick: i32,
    }
    ///Container type for all input parameters for the `nextInitializedTickWithinOneWord` function with signature `nextInitializedTickWithinOneWord(int24,bool)` and selector `0x3e7ba228`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    #[ethcall(
        name = "nextInitializedTickWithinOneWord",
        abi = "nextInitializedTickWithinOneWord(int24,bool)"
    )]
    pub struct NextInitializedTickWithinOneWordCall {
        pub tick: i32,
        pub lte: bool,
    }
    ///Container type for all of the contract's call
    #[derive(Clone, ::ethers::contract::EthAbiType, Debug, PartialEq, Eq, Hash)]
    pub enum TickBitmapTestCalls {
        Bitmap(BitmapCall),
        FlipTick(FlipTickCall),
        GetGasCostOfFlipTick(GetGasCostOfFlipTickCall),
        GetGasCostOfNextInitializedTickWithinOneWord(
            GetGasCostOfNextInitializedTickWithinOneWordCall,
        ),
        IsInitialized(IsInitializedCall),
        NextInitializedTickWithinOneWord(NextInitializedTickWithinOneWordCall),
    }
    impl ::ethers::core::abi::AbiDecode for TickBitmapTestCalls {
        fn decode(
            data: impl AsRef<[u8]>,
        ) -> ::core::result::Result<Self, ::ethers::core::abi::AbiError> {
            let data = data.as_ref();
            if let Ok(decoded) = <BitmapCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::Bitmap(decoded));
            }
            if let Ok(decoded) = <FlipTickCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::FlipTick(decoded));
            }
            if let Ok(decoded) =
                <GetGasCostOfFlipTickCall as ::ethers::core::abi::AbiDecode>::decode(data)
            {
                return Ok(Self::GetGasCostOfFlipTick(decoded));
            }
            if let Ok(decoded)
                = <GetGasCostOfNextInitializedTickWithinOneWordCall as ::ethers::core::abi::AbiDecode>::decode(
                    data,
                ) {
                return Ok(Self::GetGasCostOfNextInitializedTickWithinOneWord(decoded));
            }
            if let Ok(decoded) = <IsInitializedCall as ::ethers::core::abi::AbiDecode>::decode(data)
            {
                return Ok(Self::IsInitialized(decoded));
            }
            if let Ok(decoded) =
                <NextInitializedTickWithinOneWordCall as ::ethers::core::abi::AbiDecode>::decode(
                    data,
                )
            {
                return Ok(Self::NextInitializedTickWithinOneWord(decoded));
            }
            Err(::ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ::ethers::core::abi::AbiEncode for TickBitmapTestCalls {
        fn encode(self) -> Vec<u8> {
            match self {
                Self::Bitmap(element) => ::ethers::core::abi::AbiEncode::encode(element),
                Self::FlipTick(element) => ::ethers::core::abi::AbiEncode::encode(element),
                Self::GetGasCostOfFlipTick(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::GetGasCostOfNextInitializedTickWithinOneWord(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::IsInitialized(element) => ::ethers::core::abi::AbiEncode::encode(element),
                Self::NextInitializedTickWithinOneWord(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
            }
        }
    }
    impl ::core::fmt::Display for TickBitmapTestCalls {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
                Self::Bitmap(element) => ::core::fmt::Display::fmt(element, f),
                Self::FlipTick(element) => ::core::fmt::Display::fmt(element, f),
                Self::GetGasCostOfFlipTick(element) => ::core::fmt::Display::fmt(element, f),
                Self::GetGasCostOfNextInitializedTickWithinOneWord(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
                Self::IsInitialized(element) => ::core::fmt::Display::fmt(element, f),
                Self::NextInitializedTickWithinOneWord(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
            }
        }
    }
    impl ::core::convert::From<BitmapCall> for TickBitmapTestCalls {
        fn from(value: BitmapCall) -> Self {
            Self::Bitmap(value)
        }
    }
    impl ::core::convert::From<FlipTickCall> for TickBitmapTestCalls {
        fn from(value: FlipTickCall) -> Self {
            Self::FlipTick(value)
        }
    }
    impl ::core::convert::From<GetGasCostOfFlipTickCall> for TickBitmapTestCalls {
        fn from(value: GetGasCostOfFlipTickCall) -> Self {
            Self::GetGasCostOfFlipTick(value)
        }
    }
    impl ::core::convert::From<GetGasCostOfNextInitializedTickWithinOneWordCall>
        for TickBitmapTestCalls
    {
        fn from(value: GetGasCostOfNextInitializedTickWithinOneWordCall) -> Self {
            Self::GetGasCostOfNextInitializedTickWithinOneWord(value)
        }
    }
    impl ::core::convert::From<IsInitializedCall> for TickBitmapTestCalls {
        fn from(value: IsInitializedCall) -> Self {
            Self::IsInitialized(value)
        }
    }
    impl ::core::convert::From<NextInitializedTickWithinOneWordCall> for TickBitmapTestCalls {
        fn from(value: NextInitializedTickWithinOneWordCall) -> Self {
            Self::NextInitializedTickWithinOneWord(value)
        }
    }
    ///Container type for all return fields from the `bitmap` function with signature `bitmap(int16)` and selector `0x3ffc81ee`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    pub struct BitmapReturn(pub ::ethers::core::types::U256);
    ///Container type for all return fields from the `getGasCostOfFlipTick` function with signature `getGasCostOfFlipTick(int24)` and selector `0xf04bc943`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    pub struct GetGasCostOfFlipTickReturn(pub ::ethers::core::types::U256);
    ///Container type for all return fields from the `getGasCostOfNextInitializedTickWithinOneWord` function with signature `getGasCostOfNextInitializedTickWithinOneWord(int24,bool)` and selector `0xf0fc9224`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    pub struct GetGasCostOfNextInitializedTickWithinOneWordReturn(pub ::ethers::core::types::U256);
    ///Container type for all return fields from the `isInitialized` function with signature `isInitialized(int24)` and selector `0x2bdc2fd3`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    pub struct IsInitializedReturn(pub bool);
    ///Container type for all return fields from the `nextInitializedTickWithinOneWord` function with signature `nextInitializedTickWithinOneWord(int24,bool)` and selector `0x3e7ba228`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    pub struct NextInitializedTickWithinOneWordReturn {
        pub next: i32,
        pub initialized: bool,
    }
}
