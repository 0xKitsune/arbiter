pub use sqrt_price_math_test::*;
/// This module was auto-generated with ethers-rs Abigen.
/// More information at: <https://github.com/gakonst/ethers-rs>
#[allow(
    clippy::enum_variant_names,
    clippy::too_many_arguments,
    clippy::upper_case_acronyms,
    clippy::type_complexity,
    dead_code,
    non_camel_case_types
)]
pub mod sqrt_price_math_test {
    #[rustfmt::skip]
    const __ABI: &str = "[{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"sqrtLower\",\"type\":\"uint160\",\"components\":[]},{\"internalType\":\"uint160\",\"name\":\"sqrtUpper\",\"type\":\"uint160\",\"components\":[]},{\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\",\"components\":[]},{\"internalType\":\"bool\",\"name\":\"roundUp\",\"type\":\"bool\",\"components\":[]}],\"stateMutability\":\"pure\",\"type\":\"function\",\"name\":\"getAmount0Delta\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"sqrtLower\",\"type\":\"uint160\",\"components\":[]},{\"internalType\":\"uint160\",\"name\":\"sqrtUpper\",\"type\":\"uint160\",\"components\":[]},{\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\",\"components\":[]},{\"internalType\":\"bool\",\"name\":\"roundUp\",\"type\":\"bool\",\"components\":[]}],\"stateMutability\":\"pure\",\"type\":\"function\",\"name\":\"getAmount1Delta\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"sqrtLower\",\"type\":\"uint160\",\"components\":[]},{\"internalType\":\"uint160\",\"name\":\"sqrtUpper\",\"type\":\"uint160\",\"components\":[]},{\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\",\"components\":[]},{\"internalType\":\"bool\",\"name\":\"roundUp\",\"type\":\"bool\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"getGasCostOfGetAmount0Delta\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"sqrtLower\",\"type\":\"uint160\",\"components\":[]},{\"internalType\":\"uint160\",\"name\":\"sqrtUpper\",\"type\":\"uint160\",\"components\":[]},{\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\",\"components\":[]},{\"internalType\":\"bool\",\"name\":\"roundUp\",\"type\":\"bool\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"getGasCostOfGetAmount1Delta\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"sqrtP\",\"type\":\"uint160\",\"components\":[]},{\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"bool\",\"name\":\"zeroForOne\",\"type\":\"bool\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"getGasCostOfGetNextSqrtPriceFromInput\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"sqrtP\",\"type\":\"uint160\",\"components\":[]},{\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"bool\",\"name\":\"zeroForOne\",\"type\":\"bool\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"getGasCostOfGetNextSqrtPriceFromOutput\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"sqrtP\",\"type\":\"uint160\",\"components\":[]},{\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"bool\",\"name\":\"zeroForOne\",\"type\":\"bool\",\"components\":[]}],\"stateMutability\":\"pure\",\"type\":\"function\",\"name\":\"getNextSqrtPriceFromInput\",\"outputs\":[{\"internalType\":\"uint160\",\"name\":\"sqrtQ\",\"type\":\"uint160\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"sqrtP\",\"type\":\"uint160\",\"components\":[]},{\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"bool\",\"name\":\"zeroForOne\",\"type\":\"bool\",\"components\":[]}],\"stateMutability\":\"pure\",\"type\":\"function\",\"name\":\"getNextSqrtPriceFromOutput\",\"outputs\":[{\"internalType\":\"uint160\",\"name\":\"sqrtQ\",\"type\":\"uint160\",\"components\":[]}]}]";
    ///The parsed JSON ABI of the contract.
    pub static SQRTPRICEMATHTEST_ABI: ::ethers::contract::Lazy<::ethers::core::abi::Abi> =
        ::ethers::contract::Lazy::new(|| {
            ::ethers::core::utils::__serde_json::from_str(__ABI).expect("ABI is always valid")
        });
    #[rustfmt::skip]
    const __BYTECODE: &[u8] = &[
        96,
        128,
        96,
        64,
        82,
        52,
        128,
        21,
        97,
        0,
        16,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        97,
        8,
        74,
        128,
        97,
        0,
        32,
        96,
        0,
        57,
        96,
        0,
        243,
        254,
        96,
        128,
        96,
        64,
        82,
        52,
        128,
        21,
        97,
        0,
        16,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        96,
        4,
        54,
        16,
        97,
        0,
        136,
        87,
        96,
        0,
        53,
        96,
        224,
        28,
        128,
        99,
        175,
        149,
        94,
        59,
        17,
        97,
        0,
        91,
        87,
        128,
        99,
        175,
        149,
        94,
        59,
        20,
        97,
        1,
        207,
        87,
        128,
        99,
        215,
        205,
        175,
        113,
        20,
        97,
        2,
        22,
        87,
        128,
        99,
        226,
        15,
        122,
        192,
        20,
        97,
        2,
        93,
        87,
        128,
        99,
        254,
        223,
        43,
        95,
        20,
        97,
        2,
        160,
        87,
        97,
        0,
        136,
        86,
        91,
        128,
        99,
        3,
        77,
        33,
        228,
        20,
        97,
        0,
        141,
        87,
        128,
        99,
        44,
        50,
        212,
        182,
        20,
        97,
        0,
        226,
        87,
        128,
        99,
        72,
        160,
        197,
        189,
        20,
        97,
        1,
        41,
        87,
        128,
        99,
        170,
        88,
        39,
        106,
        20,
        97,
        1,
        112,
        87,
        91,
        96,
        0,
        128,
        253,
        91,
        97,
        0,
        208,
        96,
        4,
        128,
        54,
        3,
        96,
        128,
        129,
        16,
        21,
        97,
        0,
        163,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        129,
        53,
        22,
        144,
        96,
        1,
        96,
        1,
        96,
        128,
        27,
        3,
        96,
        32,
        130,
        1,
        53,
        22,
        144,
        96,
        64,
        129,
        1,
        53,
        144,
        96,
        96,
        1,
        53,
        21,
        21,
        97,
        2,
        227,
        86,
        91,
        96,
        64,
        128,
        81,
        145,
        130,
        82,
        81,
        144,
        129,
        144,
        3,
        96,
        32,
        1,
        144,
        243,
        91,
        97,
        0,
        208,
        96,
        4,
        128,
        54,
        3,
        96,
        128,
        129,
        16,
        21,
        97,
        0,
        248,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        129,
        53,
        129,
        22,
        145,
        96,
        32,
        129,
        1,
        53,
        144,
        145,
        22,
        144,
        96,
        1,
        96,
        1,
        96,
        128,
        27,
        3,
        96,
        64,
        130,
        1,
        53,
        22,
        144,
        96,
        96,
        1,
        53,
        21,
        21,
        97,
        3,
        4,
        86,
        91,
        97,
        0,
        208,
        96,
        4,
        128,
        54,
        3,
        96,
        128,
        129,
        16,
        21,
        97,
        1,
        63,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        129,
        53,
        129,
        22,
        145,
        96,
        32,
        129,
        1,
        53,
        144,
        145,
        22,
        144,
        96,
        1,
        96,
        1,
        96,
        128,
        27,
        3,
        96,
        64,
        130,
        1,
        53,
        22,
        144,
        96,
        96,
        1,
        53,
        21,
        21,
        97,
        3,
        27,
        86,
        91,
        97,
        1,
        179,
        96,
        4,
        128,
        54,
        3,
        96,
        128,
        129,
        16,
        21,
        97,
        1,
        134,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        129,
        53,
        22,
        144,
        96,
        1,
        96,
        1,
        96,
        128,
        27,
        3,
        96,
        32,
        130,
        1,
        53,
        22,
        144,
        96,
        64,
        129,
        1,
        53,
        144,
        96,
        96,
        1,
        53,
        21,
        21,
        97,
        3,
        41,
        86,
        91,
        96,
        64,
        128,
        81,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        144,
        146,
        22,
        130,
        82,
        81,
        144,
        129,
        144,
        3,
        96,
        32,
        1,
        144,
        243,
        91,
        97,
        0,
        208,
        96,
        4,
        128,
        54,
        3,
        96,
        128,
        129,
        16,
        21,
        97,
        1,
        229,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        129,
        53,
        129,
        22,
        145,
        96,
        32,
        129,
        1,
        53,
        144,
        145,
        22,
        144,
        96,
        1,
        96,
        1,
        96,
        128,
        27,
        3,
        96,
        64,
        130,
        1,
        53,
        22,
        144,
        96,
        96,
        1,
        53,
        21,
        21,
        97,
        3,
        55,
        86,
        91,
        97,
        0,
        208,
        96,
        4,
        128,
        54,
        3,
        96,
        128,
        129,
        16,
        21,
        97,
        2,
        44,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        129,
        53,
        129,
        22,
        145,
        96,
        32,
        129,
        1,
        53,
        144,
        145,
        22,
        144,
        96,
        1,
        96,
        1,
        96,
        128,
        27,
        3,
        96,
        64,
        130,
        1,
        53,
        22,
        144,
        96,
        96,
        1,
        53,
        21,
        21,
        97,
        3,
        73,
        86,
        91,
        97,
        0,
        208,
        96,
        4,
        128,
        54,
        3,
        96,
        128,
        129,
        16,
        21,
        97,
        2,
        115,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        129,
        53,
        22,
        144,
        96,
        1,
        96,
        1,
        96,
        128,
        27,
        3,
        96,
        32,
        130,
        1,
        53,
        22,
        144,
        96,
        64,
        129,
        1,
        53,
        144,
        96,
        96,
        1,
        53,
        21,
        21,
        97,
        3,
        91,
        86,
        91,
        97,
        1,
        179,
        96,
        4,
        128,
        54,
        3,
        96,
        128,
        129,
        16,
        21,
        97,
        2,
        182,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        129,
        53,
        22,
        144,
        96,
        1,
        96,
        1,
        96,
        128,
        27,
        3,
        96,
        32,
        130,
        1,
        53,
        22,
        144,
        96,
        64,
        129,
        1,
        53,
        144,
        96,
        96,
        1,
        53,
        21,
        21,
        97,
        3,
        109,
        86,
        91,
        96,
        0,
        128,
        90,
        144,
        80,
        97,
        2,
        245,
        134,
        134,
        134,
        134,
        97,
        3,
        123,
        86,
        91,
        80,
        90,
        144,
        3,
        144,
        80,
        91,
        148,
        147,
        80,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        97,
        3,
        18,
        133,
        133,
        133,
        133,
        97,
        3,
        204,
        86,
        91,
        149,
        148,
        80,
        80,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        97,
        3,
        18,
        133,
        133,
        133,
        133,
        97,
        4,
        119,
        86,
        91,
        96,
        0,
        97,
        3,
        18,
        133,
        133,
        133,
        133,
        97,
        3,
        123,
        86,
        91,
        96,
        0,
        128,
        90,
        144,
        80,
        97,
        2,
        245,
        134,
        134,
        134,
        134,
        97,
        4,
        119,
        86,
        91,
        96,
        0,
        128,
        90,
        144,
        80,
        97,
        2,
        245,
        134,
        134,
        134,
        134,
        97,
        3,
        204,
        86,
        91,
        96,
        0,
        128,
        90,
        144,
        80,
        97,
        2,
        245,
        134,
        134,
        134,
        134,
        97,
        4,
        226,
        86,
        91,
        96,
        0,
        97,
        3,
        18,
        133,
        133,
        133,
        133,
        97,
        4,
        226,
        86,
        91,
        96,
        0,
        128,
        133,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        17,
        97,
        3,
        146,
        87,
        96,
        0,
        128,
        253,
        91,
        96,
        0,
        132,
        96,
        1,
        96,
        1,
        96,
        128,
        27,
        3,
        22,
        17,
        97,
        3,
        168,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        97,
        3,
        191,
        87,
        97,
        3,
        186,
        133,
        133,
        133,
        96,
        1,
        97,
        5,
        42,
        86,
        91,
        97,
        3,
        18,
        86,
        91,
        97,
        3,
        18,
        133,
        133,
        133,
        96,
        1,
        97,
        6,
        11,
        86,
        91,
        96,
        0,
        131,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        133,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        17,
        21,
        97,
        3,
        236,
        87,
        146,
        147,
        146,
        91,
        96,
        1,
        96,
        96,
        27,
        96,
        1,
        96,
        224,
        27,
        3,
        96,
        96,
        132,
        144,
        27,
        22,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        134,
        134,
        3,
        129,
        22,
        144,
        135,
        22,
        97,
        4,
        22,
        87,
        96,
        0,
        128,
        253,
        91,
        131,
        97,
        4,
        70,
        87,
        134,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        97,
        4,
        57,
        131,
        131,
        137,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        97,
        6,
        238,
        86,
        91,
        129,
        97,
        4,
        64,
        87,
        254,
        91,
        4,
        97,
        4,
        108,
        86,
        91,
        97,
        4,
        108,
        97,
        4,
        93,
        131,
        131,
        137,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        97,
        7,
        158,
        86,
        91,
        136,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        97,
        7,
        216,
        86,
        91,
        151,
        150,
        80,
        80,
        80,
        80,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        131,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        133,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        17,
        21,
        97,
        4,
        151,
        87,
        146,
        147,
        146,
        91,
        129,
        97,
        4,
        191,
        87,
        97,
        3,
        186,
        131,
        96,
        1,
        96,
        1,
        96,
        128,
        27,
        3,
        22,
        134,
        134,
        3,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        96,
        1,
        96,
        96,
        27,
        97,
        6,
        238,
        86,
        91,
        97,
        3,
        18,
        131,
        96,
        1,
        96,
        1,
        96,
        128,
        27,
        3,
        22,
        134,
        134,
        3,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        96,
        1,
        96,
        96,
        27,
        97,
        7,
        158,
        86,
        91,
        96,
        0,
        128,
        133,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        17,
        97,
        4,
        249,
        87,
        96,
        0,
        128,
        253,
        91,
        96,
        0,
        132,
        96,
        1,
        96,
        1,
        96,
        128,
        27,
        3,
        22,
        17,
        97,
        5,
        15,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        97,
        5,
        33,
        87,
        97,
        3,
        186,
        133,
        133,
        133,
        96,
        0,
        97,
        6,
        11,
        86,
        91,
        97,
        3,
        18,
        133,
        133,
        133,
        96,
        0,
        91,
        96,
        0,
        129,
        21,
        97,
        5,
        157,
        87,
        96,
        0,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        132,
        17,
        21,
        97,
        5,
        96,
        87,
        97,
        5,
        91,
        132,
        96,
        1,
        96,
        96,
        27,
        135,
        96,
        1,
        96,
        1,
        96,
        128,
        27,
        3,
        22,
        97,
        6,
        238,
        86,
        91,
        97,
        5,
        120,
        86,
        91,
        96,
        1,
        96,
        1,
        96,
        128,
        27,
        3,
        133,
        22,
        96,
        96,
        133,
        144,
        27,
        129,
        97,
        5,
        118,
        87,
        254,
        91,
        4,
        91,
        144,
        80,
        97,
        5,
        149,
        97,
        5,
        144,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        136,
        22,
        131,
        97,
        7,
        227,
        86,
        91,
        97,
        7,
        249,
        86,
        91,
        145,
        80,
        80,
        97,
        2,
        252,
        86,
        91,
        96,
        0,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        132,
        17,
        21,
        97,
        5,
        203,
        87,
        97,
        5,
        198,
        132,
        96,
        1,
        96,
        96,
        27,
        135,
        96,
        1,
        96,
        1,
        96,
        128,
        27,
        3,
        22,
        97,
        7,
        158,
        86,
        91,
        97,
        5,
        226,
        86,
        91,
        97,
        5,
        226,
        96,
        96,
        133,
        144,
        27,
        96,
        1,
        96,
        1,
        96,
        128,
        27,
        3,
        135,
        22,
        97,
        7,
        216,
        86,
        91,
        144,
        80,
        128,
        134,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        17,
        97,
        5,
        249,
        87,
        96,
        0,
        128,
        253,
        91,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        134,
        22,
        3,
        144,
        80,
        97,
        2,
        252,
        86,
        91,
        96,
        0,
        130,
        97,
        6,
        25,
        87,
        80,
        131,
        97,
        2,
        252,
        86,
        91,
        96,
        1,
        96,
        96,
        27,
        96,
        1,
        96,
        224,
        27,
        3,
        96,
        96,
        133,
        144,
        27,
        22,
        130,
        21,
        97,
        6,
        167,
        87,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        134,
        22,
        132,
        129,
        2,
        144,
        133,
        130,
        129,
        97,
        6,
        71,
        87,
        254,
        91,
        4,
        20,
        21,
        97,
        6,
        120,
        87,
        129,
        129,
        1,
        130,
        129,
        16,
        97,
        6,
        118,
        87,
        97,
        6,
        108,
        131,
        137,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        131,
        97,
        7,
        158,
        86,
        91,
        147,
        80,
        80,
        80,
        80,
        97,
        2,
        252,
        86,
        91,
        80,
        91,
        97,
        6,
        158,
        130,
        97,
        6,
        153,
        135,
        138,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        134,
        129,
        97,
        6,
        146,
        87,
        254,
        91,
        4,
        144,
        97,
        7,
        227,
        86,
        91,
        97,
        7,
        216,
        86,
        91,
        146,
        80,
        80,
        80,
        97,
        2,
        252,
        86,
        91,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        134,
        22,
        132,
        129,
        2,
        144,
        133,
        130,
        129,
        97,
        6,
        190,
        87,
        254,
        91,
        4,
        20,
        128,
        21,
        97,
        6,
        203,
        87,
        80,
        128,
        130,
        17,
        91,
        97,
        6,
        212,
        87,
        96,
        0,
        128,
        253,
        91,
        128,
        130,
        3,
        97,
        6,
        108,
        97,
        5,
        144,
        132,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        139,
        22,
        132,
        97,
        7,
        158,
        86,
        91,
        96,
        0,
        128,
        128,
        96,
        0,
        25,
        133,
        135,
        9,
        134,
        134,
        2,
        146,
        80,
        130,
        129,
        16,
        144,
        131,
        144,
        3,
        3,
        144,
        80,
        128,
        97,
        7,
        36,
        87,
        96,
        0,
        132,
        17,
        97,
        7,
        25,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        130,
        144,
        4,
        144,
        80,
        97,
        7,
        151,
        86,
        91,
        128,
        132,
        17,
        97,
        7,
        48,
        87,
        96,
        0,
        128,
        253,
        91,
        96,
        0,
        132,
        134,
        136,
        9,
        96,
        0,
        134,
        129,
        3,
        135,
        22,
        150,
        135,
        144,
        4,
        150,
        96,
        2,
        96,
        3,
        137,
        2,
        129,
        24,
        128,
        138,
        2,
        130,
        3,
        2,
        128,
        138,
        2,
        130,
        3,
        2,
        128,
        138,
        2,
        130,
        3,
        2,
        128,
        138,
        2,
        130,
        3,
        2,
        128,
        138,
        2,
        130,
        3,
        2,
        128,
        138,
        2,
        144,
        145,
        3,
        2,
        145,
        129,
        144,
        3,
        129,
        144,
        4,
        96,
        1,
        1,
        134,
        132,
        17,
        144,
        149,
        3,
        148,
        144,
        148,
        2,
        145,
        144,
        148,
        3,
        146,
        144,
        146,
        4,
        145,
        144,
        145,
        23,
        145,
        144,
        145,
        2,
        145,
        80,
        80,
        91,
        147,
        146,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        97,
        7,
        171,
        132,
        132,
        132,
        97,
        6,
        238,
        86,
        91,
        144,
        80,
        96,
        0,
        130,
        128,
        97,
        7,
        183,
        87,
        254,
        91,
        132,
        134,
        9,
        17,
        21,
        97,
        7,
        151,
        87,
        96,
        0,
        25,
        129,
        16,
        97,
        7,
        206,
        87,
        96,
        0,
        128,
        253,
        91,
        96,
        1,
        1,
        147,
        146,
        80,
        80,
        80,
        86,
        91,
        128,
        130,
        4,
        145,
        6,
        21,
        21,
        1,
        144,
        86,
        91,
        128,
        130,
        1,
        130,
        129,
        16,
        21,
        97,
        7,
        243,
        87,
        96,
        0,
        128,
        253,
        91,
        146,
        145,
        80,
        80,
        86,
        91,
        128,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        129,
        22,
        129,
        20,
        97,
        8,
        15,
        87,
        96,
        0,
        128,
        253,
        91,
        145,
        144,
        80,
        86,
        254,
        162,
        100,
        105,
        112,
        102,
        115,
        88,
        34,
        18,
        32,
        188,
        111,
        131,
        67,
        206,
        245,
        150,
        44,
        241,
        27,
        240,
        216,
        27,
        111,
        22,
        87,
        95,
        240,
        10,
        244,
        150,
        233,
        21,
        10,
        246,
        150,
        73,
        212,
        24,
        104,
        126,
        244,
        100,
        115,
        111,
        108,
        99,
        67,
        0,
        7,
        6,
        0,
        51,
    ];
    ///The bytecode of the contract.
    pub static SQRTPRICEMATHTEST_BYTECODE: ::ethers::core::types::Bytes =
        ::ethers::core::types::Bytes::from_static(__BYTECODE);
    #[rustfmt::skip]
    const __DEPLOYED_BYTECODE: &[u8] = &[
        96,
        128,
        96,
        64,
        82,
        52,
        128,
        21,
        97,
        0,
        16,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        96,
        4,
        54,
        16,
        97,
        0,
        136,
        87,
        96,
        0,
        53,
        96,
        224,
        28,
        128,
        99,
        175,
        149,
        94,
        59,
        17,
        97,
        0,
        91,
        87,
        128,
        99,
        175,
        149,
        94,
        59,
        20,
        97,
        1,
        207,
        87,
        128,
        99,
        215,
        205,
        175,
        113,
        20,
        97,
        2,
        22,
        87,
        128,
        99,
        226,
        15,
        122,
        192,
        20,
        97,
        2,
        93,
        87,
        128,
        99,
        254,
        223,
        43,
        95,
        20,
        97,
        2,
        160,
        87,
        97,
        0,
        136,
        86,
        91,
        128,
        99,
        3,
        77,
        33,
        228,
        20,
        97,
        0,
        141,
        87,
        128,
        99,
        44,
        50,
        212,
        182,
        20,
        97,
        0,
        226,
        87,
        128,
        99,
        72,
        160,
        197,
        189,
        20,
        97,
        1,
        41,
        87,
        128,
        99,
        170,
        88,
        39,
        106,
        20,
        97,
        1,
        112,
        87,
        91,
        96,
        0,
        128,
        253,
        91,
        97,
        0,
        208,
        96,
        4,
        128,
        54,
        3,
        96,
        128,
        129,
        16,
        21,
        97,
        0,
        163,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        129,
        53,
        22,
        144,
        96,
        1,
        96,
        1,
        96,
        128,
        27,
        3,
        96,
        32,
        130,
        1,
        53,
        22,
        144,
        96,
        64,
        129,
        1,
        53,
        144,
        96,
        96,
        1,
        53,
        21,
        21,
        97,
        2,
        227,
        86,
        91,
        96,
        64,
        128,
        81,
        145,
        130,
        82,
        81,
        144,
        129,
        144,
        3,
        96,
        32,
        1,
        144,
        243,
        91,
        97,
        0,
        208,
        96,
        4,
        128,
        54,
        3,
        96,
        128,
        129,
        16,
        21,
        97,
        0,
        248,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        129,
        53,
        129,
        22,
        145,
        96,
        32,
        129,
        1,
        53,
        144,
        145,
        22,
        144,
        96,
        1,
        96,
        1,
        96,
        128,
        27,
        3,
        96,
        64,
        130,
        1,
        53,
        22,
        144,
        96,
        96,
        1,
        53,
        21,
        21,
        97,
        3,
        4,
        86,
        91,
        97,
        0,
        208,
        96,
        4,
        128,
        54,
        3,
        96,
        128,
        129,
        16,
        21,
        97,
        1,
        63,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        129,
        53,
        129,
        22,
        145,
        96,
        32,
        129,
        1,
        53,
        144,
        145,
        22,
        144,
        96,
        1,
        96,
        1,
        96,
        128,
        27,
        3,
        96,
        64,
        130,
        1,
        53,
        22,
        144,
        96,
        96,
        1,
        53,
        21,
        21,
        97,
        3,
        27,
        86,
        91,
        97,
        1,
        179,
        96,
        4,
        128,
        54,
        3,
        96,
        128,
        129,
        16,
        21,
        97,
        1,
        134,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        129,
        53,
        22,
        144,
        96,
        1,
        96,
        1,
        96,
        128,
        27,
        3,
        96,
        32,
        130,
        1,
        53,
        22,
        144,
        96,
        64,
        129,
        1,
        53,
        144,
        96,
        96,
        1,
        53,
        21,
        21,
        97,
        3,
        41,
        86,
        91,
        96,
        64,
        128,
        81,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        144,
        146,
        22,
        130,
        82,
        81,
        144,
        129,
        144,
        3,
        96,
        32,
        1,
        144,
        243,
        91,
        97,
        0,
        208,
        96,
        4,
        128,
        54,
        3,
        96,
        128,
        129,
        16,
        21,
        97,
        1,
        229,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        129,
        53,
        129,
        22,
        145,
        96,
        32,
        129,
        1,
        53,
        144,
        145,
        22,
        144,
        96,
        1,
        96,
        1,
        96,
        128,
        27,
        3,
        96,
        64,
        130,
        1,
        53,
        22,
        144,
        96,
        96,
        1,
        53,
        21,
        21,
        97,
        3,
        55,
        86,
        91,
        97,
        0,
        208,
        96,
        4,
        128,
        54,
        3,
        96,
        128,
        129,
        16,
        21,
        97,
        2,
        44,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        129,
        53,
        129,
        22,
        145,
        96,
        32,
        129,
        1,
        53,
        144,
        145,
        22,
        144,
        96,
        1,
        96,
        1,
        96,
        128,
        27,
        3,
        96,
        64,
        130,
        1,
        53,
        22,
        144,
        96,
        96,
        1,
        53,
        21,
        21,
        97,
        3,
        73,
        86,
        91,
        97,
        0,
        208,
        96,
        4,
        128,
        54,
        3,
        96,
        128,
        129,
        16,
        21,
        97,
        2,
        115,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        129,
        53,
        22,
        144,
        96,
        1,
        96,
        1,
        96,
        128,
        27,
        3,
        96,
        32,
        130,
        1,
        53,
        22,
        144,
        96,
        64,
        129,
        1,
        53,
        144,
        96,
        96,
        1,
        53,
        21,
        21,
        97,
        3,
        91,
        86,
        91,
        97,
        1,
        179,
        96,
        4,
        128,
        54,
        3,
        96,
        128,
        129,
        16,
        21,
        97,
        2,
        182,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        129,
        53,
        22,
        144,
        96,
        1,
        96,
        1,
        96,
        128,
        27,
        3,
        96,
        32,
        130,
        1,
        53,
        22,
        144,
        96,
        64,
        129,
        1,
        53,
        144,
        96,
        96,
        1,
        53,
        21,
        21,
        97,
        3,
        109,
        86,
        91,
        96,
        0,
        128,
        90,
        144,
        80,
        97,
        2,
        245,
        134,
        134,
        134,
        134,
        97,
        3,
        123,
        86,
        91,
        80,
        90,
        144,
        3,
        144,
        80,
        91,
        148,
        147,
        80,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        97,
        3,
        18,
        133,
        133,
        133,
        133,
        97,
        3,
        204,
        86,
        91,
        149,
        148,
        80,
        80,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        97,
        3,
        18,
        133,
        133,
        133,
        133,
        97,
        4,
        119,
        86,
        91,
        96,
        0,
        97,
        3,
        18,
        133,
        133,
        133,
        133,
        97,
        3,
        123,
        86,
        91,
        96,
        0,
        128,
        90,
        144,
        80,
        97,
        2,
        245,
        134,
        134,
        134,
        134,
        97,
        4,
        119,
        86,
        91,
        96,
        0,
        128,
        90,
        144,
        80,
        97,
        2,
        245,
        134,
        134,
        134,
        134,
        97,
        3,
        204,
        86,
        91,
        96,
        0,
        128,
        90,
        144,
        80,
        97,
        2,
        245,
        134,
        134,
        134,
        134,
        97,
        4,
        226,
        86,
        91,
        96,
        0,
        97,
        3,
        18,
        133,
        133,
        133,
        133,
        97,
        4,
        226,
        86,
        91,
        96,
        0,
        128,
        133,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        17,
        97,
        3,
        146,
        87,
        96,
        0,
        128,
        253,
        91,
        96,
        0,
        132,
        96,
        1,
        96,
        1,
        96,
        128,
        27,
        3,
        22,
        17,
        97,
        3,
        168,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        97,
        3,
        191,
        87,
        97,
        3,
        186,
        133,
        133,
        133,
        96,
        1,
        97,
        5,
        42,
        86,
        91,
        97,
        3,
        18,
        86,
        91,
        97,
        3,
        18,
        133,
        133,
        133,
        96,
        1,
        97,
        6,
        11,
        86,
        91,
        96,
        0,
        131,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        133,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        17,
        21,
        97,
        3,
        236,
        87,
        146,
        147,
        146,
        91,
        96,
        1,
        96,
        96,
        27,
        96,
        1,
        96,
        224,
        27,
        3,
        96,
        96,
        132,
        144,
        27,
        22,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        134,
        134,
        3,
        129,
        22,
        144,
        135,
        22,
        97,
        4,
        22,
        87,
        96,
        0,
        128,
        253,
        91,
        131,
        97,
        4,
        70,
        87,
        134,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        97,
        4,
        57,
        131,
        131,
        137,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        97,
        6,
        238,
        86,
        91,
        129,
        97,
        4,
        64,
        87,
        254,
        91,
        4,
        97,
        4,
        108,
        86,
        91,
        97,
        4,
        108,
        97,
        4,
        93,
        131,
        131,
        137,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        97,
        7,
        158,
        86,
        91,
        136,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        97,
        7,
        216,
        86,
        91,
        151,
        150,
        80,
        80,
        80,
        80,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        131,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        133,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        17,
        21,
        97,
        4,
        151,
        87,
        146,
        147,
        146,
        91,
        129,
        97,
        4,
        191,
        87,
        97,
        3,
        186,
        131,
        96,
        1,
        96,
        1,
        96,
        128,
        27,
        3,
        22,
        134,
        134,
        3,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        96,
        1,
        96,
        96,
        27,
        97,
        6,
        238,
        86,
        91,
        97,
        3,
        18,
        131,
        96,
        1,
        96,
        1,
        96,
        128,
        27,
        3,
        22,
        134,
        134,
        3,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        96,
        1,
        96,
        96,
        27,
        97,
        7,
        158,
        86,
        91,
        96,
        0,
        128,
        133,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        17,
        97,
        4,
        249,
        87,
        96,
        0,
        128,
        253,
        91,
        96,
        0,
        132,
        96,
        1,
        96,
        1,
        96,
        128,
        27,
        3,
        22,
        17,
        97,
        5,
        15,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        97,
        5,
        33,
        87,
        97,
        3,
        186,
        133,
        133,
        133,
        96,
        0,
        97,
        6,
        11,
        86,
        91,
        97,
        3,
        18,
        133,
        133,
        133,
        96,
        0,
        91,
        96,
        0,
        129,
        21,
        97,
        5,
        157,
        87,
        96,
        0,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        132,
        17,
        21,
        97,
        5,
        96,
        87,
        97,
        5,
        91,
        132,
        96,
        1,
        96,
        96,
        27,
        135,
        96,
        1,
        96,
        1,
        96,
        128,
        27,
        3,
        22,
        97,
        6,
        238,
        86,
        91,
        97,
        5,
        120,
        86,
        91,
        96,
        1,
        96,
        1,
        96,
        128,
        27,
        3,
        133,
        22,
        96,
        96,
        133,
        144,
        27,
        129,
        97,
        5,
        118,
        87,
        254,
        91,
        4,
        91,
        144,
        80,
        97,
        5,
        149,
        97,
        5,
        144,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        136,
        22,
        131,
        97,
        7,
        227,
        86,
        91,
        97,
        7,
        249,
        86,
        91,
        145,
        80,
        80,
        97,
        2,
        252,
        86,
        91,
        96,
        0,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        132,
        17,
        21,
        97,
        5,
        203,
        87,
        97,
        5,
        198,
        132,
        96,
        1,
        96,
        96,
        27,
        135,
        96,
        1,
        96,
        1,
        96,
        128,
        27,
        3,
        22,
        97,
        7,
        158,
        86,
        91,
        97,
        5,
        226,
        86,
        91,
        97,
        5,
        226,
        96,
        96,
        133,
        144,
        27,
        96,
        1,
        96,
        1,
        96,
        128,
        27,
        3,
        135,
        22,
        97,
        7,
        216,
        86,
        91,
        144,
        80,
        128,
        134,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        17,
        97,
        5,
        249,
        87,
        96,
        0,
        128,
        253,
        91,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        134,
        22,
        3,
        144,
        80,
        97,
        2,
        252,
        86,
        91,
        96,
        0,
        130,
        97,
        6,
        25,
        87,
        80,
        131,
        97,
        2,
        252,
        86,
        91,
        96,
        1,
        96,
        96,
        27,
        96,
        1,
        96,
        224,
        27,
        3,
        96,
        96,
        133,
        144,
        27,
        22,
        130,
        21,
        97,
        6,
        167,
        87,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        134,
        22,
        132,
        129,
        2,
        144,
        133,
        130,
        129,
        97,
        6,
        71,
        87,
        254,
        91,
        4,
        20,
        21,
        97,
        6,
        120,
        87,
        129,
        129,
        1,
        130,
        129,
        16,
        97,
        6,
        118,
        87,
        97,
        6,
        108,
        131,
        137,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        131,
        97,
        7,
        158,
        86,
        91,
        147,
        80,
        80,
        80,
        80,
        97,
        2,
        252,
        86,
        91,
        80,
        91,
        97,
        6,
        158,
        130,
        97,
        6,
        153,
        135,
        138,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        134,
        129,
        97,
        6,
        146,
        87,
        254,
        91,
        4,
        144,
        97,
        7,
        227,
        86,
        91,
        97,
        7,
        216,
        86,
        91,
        146,
        80,
        80,
        80,
        97,
        2,
        252,
        86,
        91,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        134,
        22,
        132,
        129,
        2,
        144,
        133,
        130,
        129,
        97,
        6,
        190,
        87,
        254,
        91,
        4,
        20,
        128,
        21,
        97,
        6,
        203,
        87,
        80,
        128,
        130,
        17,
        91,
        97,
        6,
        212,
        87,
        96,
        0,
        128,
        253,
        91,
        128,
        130,
        3,
        97,
        6,
        108,
        97,
        5,
        144,
        132,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        139,
        22,
        132,
        97,
        7,
        158,
        86,
        91,
        96,
        0,
        128,
        128,
        96,
        0,
        25,
        133,
        135,
        9,
        134,
        134,
        2,
        146,
        80,
        130,
        129,
        16,
        144,
        131,
        144,
        3,
        3,
        144,
        80,
        128,
        97,
        7,
        36,
        87,
        96,
        0,
        132,
        17,
        97,
        7,
        25,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        130,
        144,
        4,
        144,
        80,
        97,
        7,
        151,
        86,
        91,
        128,
        132,
        17,
        97,
        7,
        48,
        87,
        96,
        0,
        128,
        253,
        91,
        96,
        0,
        132,
        134,
        136,
        9,
        96,
        0,
        134,
        129,
        3,
        135,
        22,
        150,
        135,
        144,
        4,
        150,
        96,
        2,
        96,
        3,
        137,
        2,
        129,
        24,
        128,
        138,
        2,
        130,
        3,
        2,
        128,
        138,
        2,
        130,
        3,
        2,
        128,
        138,
        2,
        130,
        3,
        2,
        128,
        138,
        2,
        130,
        3,
        2,
        128,
        138,
        2,
        130,
        3,
        2,
        128,
        138,
        2,
        144,
        145,
        3,
        2,
        145,
        129,
        144,
        3,
        129,
        144,
        4,
        96,
        1,
        1,
        134,
        132,
        17,
        144,
        149,
        3,
        148,
        144,
        148,
        2,
        145,
        144,
        148,
        3,
        146,
        144,
        146,
        4,
        145,
        144,
        145,
        23,
        145,
        144,
        145,
        2,
        145,
        80,
        80,
        91,
        147,
        146,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        97,
        7,
        171,
        132,
        132,
        132,
        97,
        6,
        238,
        86,
        91,
        144,
        80,
        96,
        0,
        130,
        128,
        97,
        7,
        183,
        87,
        254,
        91,
        132,
        134,
        9,
        17,
        21,
        97,
        7,
        151,
        87,
        96,
        0,
        25,
        129,
        16,
        97,
        7,
        206,
        87,
        96,
        0,
        128,
        253,
        91,
        96,
        1,
        1,
        147,
        146,
        80,
        80,
        80,
        86,
        91,
        128,
        130,
        4,
        145,
        6,
        21,
        21,
        1,
        144,
        86,
        91,
        128,
        130,
        1,
        130,
        129,
        16,
        21,
        97,
        7,
        243,
        87,
        96,
        0,
        128,
        253,
        91,
        146,
        145,
        80,
        80,
        86,
        91,
        128,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        129,
        22,
        129,
        20,
        97,
        8,
        15,
        87,
        96,
        0,
        128,
        253,
        91,
        145,
        144,
        80,
        86,
        254,
        162,
        100,
        105,
        112,
        102,
        115,
        88,
        34,
        18,
        32,
        188,
        111,
        131,
        67,
        206,
        245,
        150,
        44,
        241,
        27,
        240,
        216,
        27,
        111,
        22,
        87,
        95,
        240,
        10,
        244,
        150,
        233,
        21,
        10,
        246,
        150,
        73,
        212,
        24,
        104,
        126,
        244,
        100,
        115,
        111,
        108,
        99,
        67,
        0,
        7,
        6,
        0,
        51,
    ];
    ///The deployed bytecode of the contract.
    pub static SQRTPRICEMATHTEST_DEPLOYED_BYTECODE: ::ethers::core::types::Bytes =
        ::ethers::core::types::Bytes::from_static(__DEPLOYED_BYTECODE);
    pub struct SqrtPriceMathTest<M>(::ethers::contract::Contract<M>);
    impl<M> ::core::clone::Clone for SqrtPriceMathTest<M> {
        fn clone(&self) -> Self {
            Self(::core::clone::Clone::clone(&self.0))
        }
    }
    impl<M> ::core::ops::Deref for SqrtPriceMathTest<M> {
        type Target = ::ethers::contract::Contract<M>;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl<M> ::core::ops::DerefMut for SqrtPriceMathTest<M> {
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl<M> ::core::fmt::Debug for SqrtPriceMathTest<M> {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple(stringify!(SqrtPriceMathTest))
                .field(&self.address())
                .finish()
        }
    }
    impl<M: ::ethers::providers::Middleware> SqrtPriceMathTest<M> {
        /// Creates a new contract instance with the specified `ethers` client at
        /// `address`. The contract derefs to a `ethers::Contract` object.
        pub fn new<T: Into<::ethers::core::types::Address>>(
            address: T,
            client: ::std::sync::Arc<M>,
        ) -> Self {
            Self(::ethers::contract::Contract::new(
                address.into(),
                SQRTPRICEMATHTEST_ABI.clone(),
                client,
            ))
        }
        /// Constructs the general purpose `Deployer` instance based on the provided constructor arguments and sends it.
        /// Returns a new instance of a deployer that returns an instance of this contract after sending the transaction
        ///
        /// Notes:
        /// - If there are no constructor arguments, you should pass `()` as the argument.
        /// - The default poll duration is 7 seconds.
        /// - The default number of confirmations is 1 block.
        ///
        ///
        /// # Example
        ///
        /// Generate contract bindings with `abigen!` and deploy a new contract instance.
        ///
        /// *Note*: this requires a `bytecode` and `abi` object in the `greeter.json` artifact.
        ///
        /// ```ignore
        /// # async fn deploy<M: ethers::providers::Middleware>(client: ::std::sync::Arc<M>) {
        ///     abigen!(Greeter, "../greeter.json");
        ///
        ///    let greeter_contract = Greeter::deploy(client, "Hello world!".to_string()).unwrap().send().await.unwrap();
        ///    let msg = greeter_contract.greet().call().await.unwrap();
        /// # }
        /// ```
        pub fn deploy<T: ::ethers::core::abi::Tokenize>(
            client: ::std::sync::Arc<M>,
            constructor_args: T,
        ) -> ::core::result::Result<
            ::ethers::contract::builders::ContractDeployer<M, Self>,
            ::ethers::contract::ContractError<M>,
        > {
            let factory = ::ethers::contract::ContractFactory::new(
                SQRTPRICEMATHTEST_ABI.clone(),
                SQRTPRICEMATHTEST_BYTECODE.clone().into(),
                client,
            );
            let deployer = factory.deploy(constructor_args)?;
            let deployer = ::ethers::contract::ContractDeployer::new(deployer);
            Ok(deployer)
        }
        ///Calls the contract's `getAmount0Delta` (0x2c32d4b6) function
        pub fn get_amount_0_delta(
            &self,
            sqrt_lower: ::ethers::core::types::U256,
            sqrt_upper: ::ethers::core::types::U256,
            liquidity: u128,
            round_up: bool,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash(
                    [44, 50, 212, 182],
                    (sqrt_lower, sqrt_upper, liquidity, round_up),
                )
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `getAmount1Delta` (0x48a0c5bd) function
        pub fn get_amount_1_delta(
            &self,
            sqrt_lower: ::ethers::core::types::U256,
            sqrt_upper: ::ethers::core::types::U256,
            liquidity: u128,
            round_up: bool,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash(
                    [72, 160, 197, 189],
                    (sqrt_lower, sqrt_upper, liquidity, round_up),
                )
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `getGasCostOfGetAmount0Delta` (0xd7cdaf71) function
        pub fn get_gas_cost_of_get_amount_0_delta(
            &self,
            sqrt_lower: ::ethers::core::types::U256,
            sqrt_upper: ::ethers::core::types::U256,
            liquidity: u128,
            round_up: bool,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash(
                    [215, 205, 175, 113],
                    (sqrt_lower, sqrt_upper, liquidity, round_up),
                )
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `getGasCostOfGetAmount1Delta` (0xaf955e3b) function
        pub fn get_gas_cost_of_get_amount_1_delta(
            &self,
            sqrt_lower: ::ethers::core::types::U256,
            sqrt_upper: ::ethers::core::types::U256,
            liquidity: u128,
            round_up: bool,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash(
                    [175, 149, 94, 59],
                    (sqrt_lower, sqrt_upper, liquidity, round_up),
                )
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `getGasCostOfGetNextSqrtPriceFromInput` (0x034d21e4) function
        pub fn get_gas_cost_of_get_next_sqrt_price_from_input(
            &self,
            sqrt_p: ::ethers::core::types::U256,
            liquidity: u128,
            amount_in: ::ethers::core::types::U256,
            zero_for_one: bool,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash(
                    [3, 77, 33, 228],
                    (sqrt_p, liquidity, amount_in, zero_for_one),
                )
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `getGasCostOfGetNextSqrtPriceFromOutput` (0xe20f7ac0) function
        pub fn get_gas_cost_of_get_next_sqrt_price_from_output(
            &self,
            sqrt_p: ::ethers::core::types::U256,
            liquidity: u128,
            amount_out: ::ethers::core::types::U256,
            zero_for_one: bool,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash(
                    [226, 15, 122, 192],
                    (sqrt_p, liquidity, amount_out, zero_for_one),
                )
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `getNextSqrtPriceFromInput` (0xaa58276a) function
        pub fn get_next_sqrt_price_from_input(
            &self,
            sqrt_p: ::ethers::core::types::U256,
            liquidity: u128,
            amount_in: ::ethers::core::types::U256,
            zero_for_one: bool,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash(
                    [170, 88, 39, 106],
                    (sqrt_p, liquidity, amount_in, zero_for_one),
                )
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `getNextSqrtPriceFromOutput` (0xfedf2b5f) function
        pub fn get_next_sqrt_price_from_output(
            &self,
            sqrt_p: ::ethers::core::types::U256,
            liquidity: u128,
            amount_out: ::ethers::core::types::U256,
            zero_for_one: bool,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash(
                    [254, 223, 43, 95],
                    (sqrt_p, liquidity, amount_out, zero_for_one),
                )
                .expect("method not found (this should never happen)")
        }
    }
    impl<M: ::ethers::providers::Middleware> From<::ethers::contract::Contract<M>>
        for SqrtPriceMathTest<M>
    {
        fn from(contract: ::ethers::contract::Contract<M>) -> Self {
            Self::new(contract.address(), contract.client())
        }
    }
    ///Container type for all input parameters for the `getAmount0Delta` function with signature `getAmount0Delta(uint160,uint160,uint128,bool)` and selector `0x2c32d4b6`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    #[ethcall(
        name = "getAmount0Delta",
        abi = "getAmount0Delta(uint160,uint160,uint128,bool)"
    )]
    pub struct GetAmount0DeltaCall {
        pub sqrt_lower: ::ethers::core::types::U256,
        pub sqrt_upper: ::ethers::core::types::U256,
        pub liquidity: u128,
        pub round_up: bool,
    }
    ///Container type for all input parameters for the `getAmount1Delta` function with signature `getAmount1Delta(uint160,uint160,uint128,bool)` and selector `0x48a0c5bd`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    #[ethcall(
        name = "getAmount1Delta",
        abi = "getAmount1Delta(uint160,uint160,uint128,bool)"
    )]
    pub struct GetAmount1DeltaCall {
        pub sqrt_lower: ::ethers::core::types::U256,
        pub sqrt_upper: ::ethers::core::types::U256,
        pub liquidity: u128,
        pub round_up: bool,
    }
    ///Container type for all input parameters for the `getGasCostOfGetAmount0Delta` function with signature `getGasCostOfGetAmount0Delta(uint160,uint160,uint128,bool)` and selector `0xd7cdaf71`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    #[ethcall(
        name = "getGasCostOfGetAmount0Delta",
        abi = "getGasCostOfGetAmount0Delta(uint160,uint160,uint128,bool)"
    )]
    pub struct GetGasCostOfGetAmount0DeltaCall {
        pub sqrt_lower: ::ethers::core::types::U256,
        pub sqrt_upper: ::ethers::core::types::U256,
        pub liquidity: u128,
        pub round_up: bool,
    }
    ///Container type for all input parameters for the `getGasCostOfGetAmount1Delta` function with signature `getGasCostOfGetAmount1Delta(uint160,uint160,uint128,bool)` and selector `0xaf955e3b`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    #[ethcall(
        name = "getGasCostOfGetAmount1Delta",
        abi = "getGasCostOfGetAmount1Delta(uint160,uint160,uint128,bool)"
    )]
    pub struct GetGasCostOfGetAmount1DeltaCall {
        pub sqrt_lower: ::ethers::core::types::U256,
        pub sqrt_upper: ::ethers::core::types::U256,
        pub liquidity: u128,
        pub round_up: bool,
    }
    ///Container type for all input parameters for the `getGasCostOfGetNextSqrtPriceFromInput` function with signature `getGasCostOfGetNextSqrtPriceFromInput(uint160,uint128,uint256,bool)` and selector `0x034d21e4`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    #[ethcall(
        name = "getGasCostOfGetNextSqrtPriceFromInput",
        abi = "getGasCostOfGetNextSqrtPriceFromInput(uint160,uint128,uint256,bool)"
    )]
    pub struct GetGasCostOfGetNextSqrtPriceFromInputCall {
        pub sqrt_p: ::ethers::core::types::U256,
        pub liquidity: u128,
        pub amount_in: ::ethers::core::types::U256,
        pub zero_for_one: bool,
    }
    ///Container type for all input parameters for the `getGasCostOfGetNextSqrtPriceFromOutput` function with signature `getGasCostOfGetNextSqrtPriceFromOutput(uint160,uint128,uint256,bool)` and selector `0xe20f7ac0`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    #[ethcall(
        name = "getGasCostOfGetNextSqrtPriceFromOutput",
        abi = "getGasCostOfGetNextSqrtPriceFromOutput(uint160,uint128,uint256,bool)"
    )]
    pub struct GetGasCostOfGetNextSqrtPriceFromOutputCall {
        pub sqrt_p: ::ethers::core::types::U256,
        pub liquidity: u128,
        pub amount_out: ::ethers::core::types::U256,
        pub zero_for_one: bool,
    }
    ///Container type for all input parameters for the `getNextSqrtPriceFromInput` function with signature `getNextSqrtPriceFromInput(uint160,uint128,uint256,bool)` and selector `0xaa58276a`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    #[ethcall(
        name = "getNextSqrtPriceFromInput",
        abi = "getNextSqrtPriceFromInput(uint160,uint128,uint256,bool)"
    )]
    pub struct GetNextSqrtPriceFromInputCall {
        pub sqrt_p: ::ethers::core::types::U256,
        pub liquidity: u128,
        pub amount_in: ::ethers::core::types::U256,
        pub zero_for_one: bool,
    }
    ///Container type for all input parameters for the `getNextSqrtPriceFromOutput` function with signature `getNextSqrtPriceFromOutput(uint160,uint128,uint256,bool)` and selector `0xfedf2b5f`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    #[ethcall(
        name = "getNextSqrtPriceFromOutput",
        abi = "getNextSqrtPriceFromOutput(uint160,uint128,uint256,bool)"
    )]
    pub struct GetNextSqrtPriceFromOutputCall {
        pub sqrt_p: ::ethers::core::types::U256,
        pub liquidity: u128,
        pub amount_out: ::ethers::core::types::U256,
        pub zero_for_one: bool,
    }
    ///Container type for all of the contract's call
    #[derive(Clone, ::ethers::contract::EthAbiType, Debug, PartialEq, Eq, Hash)]
    pub enum SqrtPriceMathTestCalls {
        GetAmount0Delta(GetAmount0DeltaCall),
        GetAmount1Delta(GetAmount1DeltaCall),
        GetGasCostOfGetAmount0Delta(GetGasCostOfGetAmount0DeltaCall),
        GetGasCostOfGetAmount1Delta(GetGasCostOfGetAmount1DeltaCall),
        GetGasCostOfGetNextSqrtPriceFromInput(GetGasCostOfGetNextSqrtPriceFromInputCall),
        GetGasCostOfGetNextSqrtPriceFromOutput(GetGasCostOfGetNextSqrtPriceFromOutputCall),
        GetNextSqrtPriceFromInput(GetNextSqrtPriceFromInputCall),
        GetNextSqrtPriceFromOutput(GetNextSqrtPriceFromOutputCall),
    }
    impl ::ethers::core::abi::AbiDecode for SqrtPriceMathTestCalls {
        fn decode(
            data: impl AsRef<[u8]>,
        ) -> ::core::result::Result<Self, ::ethers::core::abi::AbiError> {
            let data = data.as_ref();
            if let Ok(decoded) =
                <GetAmount0DeltaCall as ::ethers::core::abi::AbiDecode>::decode(data)
            {
                return Ok(Self::GetAmount0Delta(decoded));
            }
            if let Ok(decoded) =
                <GetAmount1DeltaCall as ::ethers::core::abi::AbiDecode>::decode(data)
            {
                return Ok(Self::GetAmount1Delta(decoded));
            }
            if let Ok(decoded) =
                <GetGasCostOfGetAmount0DeltaCall as ::ethers::core::abi::AbiDecode>::decode(data)
            {
                return Ok(Self::GetGasCostOfGetAmount0Delta(decoded));
            }
            if let Ok(decoded) =
                <GetGasCostOfGetAmount1DeltaCall as ::ethers::core::abi::AbiDecode>::decode(data)
            {
                return Ok(Self::GetGasCostOfGetAmount1Delta(decoded));
            }
            if let Ok(decoded)
                = <GetGasCostOfGetNextSqrtPriceFromInputCall as ::ethers::core::abi::AbiDecode>::decode(
                    data,
                ) {
                return Ok(Self::GetGasCostOfGetNextSqrtPriceFromInput(decoded));
            }
            if let Ok(decoded)
                = <GetGasCostOfGetNextSqrtPriceFromOutputCall as ::ethers::core::abi::AbiDecode>::decode(
                    data,
                ) {
                return Ok(Self::GetGasCostOfGetNextSqrtPriceFromOutput(decoded));
            }
            if let Ok(decoded) =
                <GetNextSqrtPriceFromInputCall as ::ethers::core::abi::AbiDecode>::decode(data)
            {
                return Ok(Self::GetNextSqrtPriceFromInput(decoded));
            }
            if let Ok(decoded) =
                <GetNextSqrtPriceFromOutputCall as ::ethers::core::abi::AbiDecode>::decode(data)
            {
                return Ok(Self::GetNextSqrtPriceFromOutput(decoded));
            }
            Err(::ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ::ethers::core::abi::AbiEncode for SqrtPriceMathTestCalls {
        fn encode(self) -> Vec<u8> {
            match self {
                Self::GetAmount0Delta(element) => ::ethers::core::abi::AbiEncode::encode(element),
                Self::GetAmount1Delta(element) => ::ethers::core::abi::AbiEncode::encode(element),
                Self::GetGasCostOfGetAmount0Delta(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::GetGasCostOfGetAmount1Delta(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::GetGasCostOfGetNextSqrtPriceFromInput(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::GetGasCostOfGetNextSqrtPriceFromOutput(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::GetNextSqrtPriceFromInput(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::GetNextSqrtPriceFromOutput(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
            }
        }
    }
    impl ::core::fmt::Display for SqrtPriceMathTestCalls {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
                Self::GetAmount0Delta(element) => ::core::fmt::Display::fmt(element, f),
                Self::GetAmount1Delta(element) => ::core::fmt::Display::fmt(element, f),
                Self::GetGasCostOfGetAmount0Delta(element) => ::core::fmt::Display::fmt(element, f),
                Self::GetGasCostOfGetAmount1Delta(element) => ::core::fmt::Display::fmt(element, f),
                Self::GetGasCostOfGetNextSqrtPriceFromInput(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
                Self::GetGasCostOfGetNextSqrtPriceFromOutput(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
                Self::GetNextSqrtPriceFromInput(element) => ::core::fmt::Display::fmt(element, f),
                Self::GetNextSqrtPriceFromOutput(element) => ::core::fmt::Display::fmt(element, f),
            }
        }
    }
    impl ::core::convert::From<GetAmount0DeltaCall> for SqrtPriceMathTestCalls {
        fn from(value: GetAmount0DeltaCall) -> Self {
            Self::GetAmount0Delta(value)
        }
    }
    impl ::core::convert::From<GetAmount1DeltaCall> for SqrtPriceMathTestCalls {
        fn from(value: GetAmount1DeltaCall) -> Self {
            Self::GetAmount1Delta(value)
        }
    }
    impl ::core::convert::From<GetGasCostOfGetAmount0DeltaCall> for SqrtPriceMathTestCalls {
        fn from(value: GetGasCostOfGetAmount0DeltaCall) -> Self {
            Self::GetGasCostOfGetAmount0Delta(value)
        }
    }
    impl ::core::convert::From<GetGasCostOfGetAmount1DeltaCall> for SqrtPriceMathTestCalls {
        fn from(value: GetGasCostOfGetAmount1DeltaCall) -> Self {
            Self::GetGasCostOfGetAmount1Delta(value)
        }
    }
    impl ::core::convert::From<GetGasCostOfGetNextSqrtPriceFromInputCall> for SqrtPriceMathTestCalls {
        fn from(value: GetGasCostOfGetNextSqrtPriceFromInputCall) -> Self {
            Self::GetGasCostOfGetNextSqrtPriceFromInput(value)
        }
    }
    impl ::core::convert::From<GetGasCostOfGetNextSqrtPriceFromOutputCall> for SqrtPriceMathTestCalls {
        fn from(value: GetGasCostOfGetNextSqrtPriceFromOutputCall) -> Self {
            Self::GetGasCostOfGetNextSqrtPriceFromOutput(value)
        }
    }
    impl ::core::convert::From<GetNextSqrtPriceFromInputCall> for SqrtPriceMathTestCalls {
        fn from(value: GetNextSqrtPriceFromInputCall) -> Self {
            Self::GetNextSqrtPriceFromInput(value)
        }
    }
    impl ::core::convert::From<GetNextSqrtPriceFromOutputCall> for SqrtPriceMathTestCalls {
        fn from(value: GetNextSqrtPriceFromOutputCall) -> Self {
            Self::GetNextSqrtPriceFromOutput(value)
        }
    }
    ///Container type for all return fields from the `getAmount0Delta` function with signature `getAmount0Delta(uint160,uint160,uint128,bool)` and selector `0x2c32d4b6`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    pub struct GetAmount0DeltaReturn {
        pub amount_0: ::ethers::core::types::U256,
    }
    ///Container type for all return fields from the `getAmount1Delta` function with signature `getAmount1Delta(uint160,uint160,uint128,bool)` and selector `0x48a0c5bd`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    pub struct GetAmount1DeltaReturn {
        pub amount_1: ::ethers::core::types::U256,
    }
    ///Container type for all return fields from the `getGasCostOfGetAmount0Delta` function with signature `getGasCostOfGetAmount0Delta(uint160,uint160,uint128,bool)` and selector `0xd7cdaf71`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    pub struct GetGasCostOfGetAmount0DeltaReturn(pub ::ethers::core::types::U256);
    ///Container type for all return fields from the `getGasCostOfGetAmount1Delta` function with signature `getGasCostOfGetAmount1Delta(uint160,uint160,uint128,bool)` and selector `0xaf955e3b`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    pub struct GetGasCostOfGetAmount1DeltaReturn(pub ::ethers::core::types::U256);
    ///Container type for all return fields from the `getGasCostOfGetNextSqrtPriceFromInput` function with signature `getGasCostOfGetNextSqrtPriceFromInput(uint160,uint128,uint256,bool)` and selector `0x034d21e4`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    pub struct GetGasCostOfGetNextSqrtPriceFromInputReturn(pub ::ethers::core::types::U256);
    ///Container type for all return fields from the `getGasCostOfGetNextSqrtPriceFromOutput` function with signature `getGasCostOfGetNextSqrtPriceFromOutput(uint160,uint128,uint256,bool)` and selector `0xe20f7ac0`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    pub struct GetGasCostOfGetNextSqrtPriceFromOutputReturn(pub ::ethers::core::types::U256);
    ///Container type for all return fields from the `getNextSqrtPriceFromInput` function with signature `getNextSqrtPriceFromInput(uint160,uint128,uint256,bool)` and selector `0xaa58276a`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    pub struct GetNextSqrtPriceFromInputReturn {
        pub sqrt_q: ::ethers::core::types::U256,
    }
    ///Container type for all return fields from the `getNextSqrtPriceFromOutput` function with signature `getNextSqrtPriceFromOutput(uint160,uint128,uint256,bool)` and selector `0xfedf2b5f`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    pub struct GetNextSqrtPriceFromOutputReturn {
        pub sqrt_q: ::ethers::core::types::U256,
    }
}
