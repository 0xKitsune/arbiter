pub use bit_math_test::*;
/// This module was auto-generated with ethers-rs Abigen.
/// More information at: <https://github.com/gakonst/ethers-rs>
#[allow(
    clippy::enum_variant_names,
    clippy::too_many_arguments,
    clippy::upper_case_acronyms,
    clippy::type_complexity,
    dead_code,
    non_camel_case_types
)]
pub mod bit_math_test {
    #[rustfmt::skip]
    const __ABI: &str = "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"getGasCostOfLeastSignificantBit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"getGasCostOfMostSignificantBit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"pure\",\"type\":\"function\",\"name\":\"leastSignificantBit\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"r\",\"type\":\"uint8\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"pure\",\"type\":\"function\",\"name\":\"mostSignificantBit\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"r\",\"type\":\"uint8\",\"components\":[]}]}]";
    ///The parsed JSON ABI of the contract.
    pub static BITMATHTEST_ABI: ::ethers::contract::Lazy<::ethers::core::abi::Abi> =
        ::ethers::contract::Lazy::new(|| {
            ::ethers::core::utils::__serde_json::from_str(__ABI).expect("ABI is always valid")
        });
    #[rustfmt::skip]
    const __BYTECODE: &[u8] = &[
        96,
        128,
        96,
        64,
        82,
        52,
        128,
        21,
        97,
        0,
        16,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        97,
        2,
        247,
        128,
        97,
        0,
        32,
        96,
        0,
        57,
        96,
        0,
        243,
        254,
        96,
        128,
        96,
        64,
        82,
        52,
        128,
        21,
        97,
        0,
        16,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        96,
        4,
        54,
        16,
        97,
        0,
        75,
        87,
        96,
        0,
        53,
        96,
        224,
        28,
        128,
        98,
        70,
        183,
        119,
        20,
        97,
        0,
        80,
        87,
        128,
        99,
        107,
        131,
        207,
        38,
        20,
        97,
        0,
        127,
        87,
        128,
        99,
        210,
        48,
        210,
        63,
        20,
        97,
        0,
        156,
        87,
        128,
        99,
        230,
        188,
        188,
        101,
        20,
        97,
        0,
        207,
        87,
        91,
        96,
        0,
        128,
        253,
        91,
        97,
        0,
        109,
        96,
        4,
        128,
        54,
        3,
        96,
        32,
        129,
        16,
        21,
        97,
        0,
        102,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        53,
        97,
        0,
        236,
        86,
        91,
        96,
        64,
        128,
        81,
        145,
        130,
        82,
        81,
        144,
        129,
        144,
        3,
        96,
        32,
        1,
        144,
        243,
        91,
        97,
        0,
        109,
        96,
        4,
        128,
        54,
        3,
        96,
        32,
        129,
        16,
        21,
        97,
        0,
        149,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        53,
        97,
        1,
        7,
        86,
        91,
        97,
        0,
        185,
        96,
        4,
        128,
        54,
        3,
        96,
        32,
        129,
        16,
        21,
        97,
        0,
        178,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        53,
        97,
        1,
        22,
        86,
        91,
        96,
        64,
        128,
        81,
        96,
        255,
        144,
        146,
        22,
        130,
        82,
        81,
        144,
        129,
        144,
        3,
        96,
        32,
        1,
        144,
        243,
        91,
        97,
        0,
        185,
        96,
        4,
        128,
        54,
        3,
        96,
        32,
        129,
        16,
        21,
        97,
        0,
        229,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        53,
        97,
        1,
        39,
        86,
        91,
        96,
        0,
        128,
        90,
        144,
        80,
        97,
        0,
        251,
        131,
        97,
        1,
        46,
        86,
        91,
        80,
        90,
        144,
        3,
        144,
        80,
        91,
        145,
        144,
        80,
        86,
        91,
        96,
        0,
        128,
        90,
        144,
        80,
        97,
        0,
        251,
        131,
        97,
        1,
        206,
        86,
        91,
        96,
        0,
        97,
        1,
        33,
        130,
        97,
        1,
        206,
        86,
        91,
        146,
        145,
        80,
        80,
        86,
        91,
        96,
        0,
        97,
        1,
        33,
        130,
        91,
        96,
        0,
        128,
        130,
        17,
        97,
        1,
        60,
        87,
        96,
        0,
        128,
        253,
        91,
        96,
        1,
        96,
        128,
        27,
        130,
        16,
        97,
        1,
        79,
        87,
        96,
        128,
        145,
        130,
        28,
        145,
        1,
        91,
        104,
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        130,
        16,
        97,
        1,
        103,
        87,
        96,
        64,
        145,
        130,
        28,
        145,
        1,
        91,
        100,
        1,
        0,
        0,
        0,
        0,
        130,
        16,
        97,
        1,
        123,
        87,
        96,
        32,
        145,
        130,
        28,
        145,
        1,
        91,
        98,
        1,
        0,
        0,
        130,
        16,
        97,
        1,
        141,
        87,
        96,
        16,
        145,
        130,
        28,
        145,
        1,
        91,
        97,
        1,
        0,
        130,
        16,
        97,
        1,
        158,
        87,
        96,
        8,
        145,
        130,
        28,
        145,
        1,
        91,
        96,
        16,
        130,
        16,
        97,
        1,
        174,
        87,
        96,
        4,
        145,
        130,
        28,
        145,
        1,
        91,
        96,
        4,
        130,
        16,
        97,
        1,
        190,
        87,
        96,
        2,
        145,
        130,
        28,
        145,
        1,
        91,
        96,
        2,
        130,
        16,
        97,
        1,
        2,
        87,
        96,
        1,
        1,
        145,
        144,
        80,
        86,
        91,
        96,
        0,
        128,
        130,
        17,
        97,
        1,
        220,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        96,
        255,
        111,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        130,
        22,
        21,
        97,
        2,
        0,
        87,
        96,
        127,
        25,
        1,
        97,
        2,
        8,
        86,
        91,
        96,
        128,
        130,
        144,
        28,
        145,
        80,
        91,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        130,
        22,
        21,
        97,
        2,
        33,
        87,
        96,
        63,
        25,
        1,
        97,
        2,
        41,
        86,
        91,
        96,
        64,
        130,
        144,
        28,
        145,
        80,
        91,
        99,
        255,
        255,
        255,
        255,
        130,
        22,
        21,
        97,
        2,
        62,
        87,
        96,
        31,
        25,
        1,
        97,
        2,
        70,
        86,
        91,
        96,
        32,
        130,
        144,
        28,
        145,
        80,
        91,
        97,
        255,
        255,
        130,
        22,
        21,
        97,
        2,
        89,
        87,
        96,
        15,
        25,
        1,
        97,
        2,
        97,
        86,
        91,
        96,
        16,
        130,
        144,
        28,
        145,
        80,
        91,
        96,
        255,
        130,
        22,
        21,
        97,
        2,
        115,
        87,
        96,
        7,
        25,
        1,
        97,
        2,
        123,
        86,
        91,
        96,
        8,
        130,
        144,
        28,
        145,
        80,
        91,
        96,
        15,
        130,
        22,
        21,
        97,
        2,
        141,
        87,
        96,
        3,
        25,
        1,
        97,
        2,
        149,
        86,
        91,
        96,
        4,
        130,
        144,
        28,
        145,
        80,
        91,
        96,
        3,
        130,
        22,
        21,
        97,
        2,
        167,
        87,
        96,
        1,
        25,
        1,
        97,
        2,
        175,
        86,
        91,
        96,
        2,
        130,
        144,
        28,
        145,
        80,
        91,
        96,
        1,
        130,
        22,
        21,
        97,
        1,
        2,
        87,
        96,
        0,
        25,
        1,
        145,
        144,
        80,
        86,
        254,
        162,
        100,
        105,
        112,
        102,
        115,
        88,
        34,
        18,
        32,
        10,
        173,
        29,
        212,
        128,
        159,
        42,
        164,
        32,
        202,
        91,
        64,
        115,
        104,
        50,
        211,
        97,
        251,
        237,
        119,
        44,
        2,
        23,
        84,
        247,
        16,
        15,
        188,
        104,
        176,
        24,
        200,
        100,
        115,
        111,
        108,
        99,
        67,
        0,
        7,
        6,
        0,
        51,
    ];
    ///The bytecode of the contract.
    pub static BITMATHTEST_BYTECODE: ::ethers::core::types::Bytes =
        ::ethers::core::types::Bytes::from_static(__BYTECODE);
    #[rustfmt::skip]
    const __DEPLOYED_BYTECODE: &[u8] = &[
        96,
        128,
        96,
        64,
        82,
        52,
        128,
        21,
        97,
        0,
        16,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        96,
        4,
        54,
        16,
        97,
        0,
        75,
        87,
        96,
        0,
        53,
        96,
        224,
        28,
        128,
        98,
        70,
        183,
        119,
        20,
        97,
        0,
        80,
        87,
        128,
        99,
        107,
        131,
        207,
        38,
        20,
        97,
        0,
        127,
        87,
        128,
        99,
        210,
        48,
        210,
        63,
        20,
        97,
        0,
        156,
        87,
        128,
        99,
        230,
        188,
        188,
        101,
        20,
        97,
        0,
        207,
        87,
        91,
        96,
        0,
        128,
        253,
        91,
        97,
        0,
        109,
        96,
        4,
        128,
        54,
        3,
        96,
        32,
        129,
        16,
        21,
        97,
        0,
        102,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        53,
        97,
        0,
        236,
        86,
        91,
        96,
        64,
        128,
        81,
        145,
        130,
        82,
        81,
        144,
        129,
        144,
        3,
        96,
        32,
        1,
        144,
        243,
        91,
        97,
        0,
        109,
        96,
        4,
        128,
        54,
        3,
        96,
        32,
        129,
        16,
        21,
        97,
        0,
        149,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        53,
        97,
        1,
        7,
        86,
        91,
        97,
        0,
        185,
        96,
        4,
        128,
        54,
        3,
        96,
        32,
        129,
        16,
        21,
        97,
        0,
        178,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        53,
        97,
        1,
        22,
        86,
        91,
        96,
        64,
        128,
        81,
        96,
        255,
        144,
        146,
        22,
        130,
        82,
        81,
        144,
        129,
        144,
        3,
        96,
        32,
        1,
        144,
        243,
        91,
        97,
        0,
        185,
        96,
        4,
        128,
        54,
        3,
        96,
        32,
        129,
        16,
        21,
        97,
        0,
        229,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        53,
        97,
        1,
        39,
        86,
        91,
        96,
        0,
        128,
        90,
        144,
        80,
        97,
        0,
        251,
        131,
        97,
        1,
        46,
        86,
        91,
        80,
        90,
        144,
        3,
        144,
        80,
        91,
        145,
        144,
        80,
        86,
        91,
        96,
        0,
        128,
        90,
        144,
        80,
        97,
        0,
        251,
        131,
        97,
        1,
        206,
        86,
        91,
        96,
        0,
        97,
        1,
        33,
        130,
        97,
        1,
        206,
        86,
        91,
        146,
        145,
        80,
        80,
        86,
        91,
        96,
        0,
        97,
        1,
        33,
        130,
        91,
        96,
        0,
        128,
        130,
        17,
        97,
        1,
        60,
        87,
        96,
        0,
        128,
        253,
        91,
        96,
        1,
        96,
        128,
        27,
        130,
        16,
        97,
        1,
        79,
        87,
        96,
        128,
        145,
        130,
        28,
        145,
        1,
        91,
        104,
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        130,
        16,
        97,
        1,
        103,
        87,
        96,
        64,
        145,
        130,
        28,
        145,
        1,
        91,
        100,
        1,
        0,
        0,
        0,
        0,
        130,
        16,
        97,
        1,
        123,
        87,
        96,
        32,
        145,
        130,
        28,
        145,
        1,
        91,
        98,
        1,
        0,
        0,
        130,
        16,
        97,
        1,
        141,
        87,
        96,
        16,
        145,
        130,
        28,
        145,
        1,
        91,
        97,
        1,
        0,
        130,
        16,
        97,
        1,
        158,
        87,
        96,
        8,
        145,
        130,
        28,
        145,
        1,
        91,
        96,
        16,
        130,
        16,
        97,
        1,
        174,
        87,
        96,
        4,
        145,
        130,
        28,
        145,
        1,
        91,
        96,
        4,
        130,
        16,
        97,
        1,
        190,
        87,
        96,
        2,
        145,
        130,
        28,
        145,
        1,
        91,
        96,
        2,
        130,
        16,
        97,
        1,
        2,
        87,
        96,
        1,
        1,
        145,
        144,
        80,
        86,
        91,
        96,
        0,
        128,
        130,
        17,
        97,
        1,
        220,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        96,
        255,
        111,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        130,
        22,
        21,
        97,
        2,
        0,
        87,
        96,
        127,
        25,
        1,
        97,
        2,
        8,
        86,
        91,
        96,
        128,
        130,
        144,
        28,
        145,
        80,
        91,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        130,
        22,
        21,
        97,
        2,
        33,
        87,
        96,
        63,
        25,
        1,
        97,
        2,
        41,
        86,
        91,
        96,
        64,
        130,
        144,
        28,
        145,
        80,
        91,
        99,
        255,
        255,
        255,
        255,
        130,
        22,
        21,
        97,
        2,
        62,
        87,
        96,
        31,
        25,
        1,
        97,
        2,
        70,
        86,
        91,
        96,
        32,
        130,
        144,
        28,
        145,
        80,
        91,
        97,
        255,
        255,
        130,
        22,
        21,
        97,
        2,
        89,
        87,
        96,
        15,
        25,
        1,
        97,
        2,
        97,
        86,
        91,
        96,
        16,
        130,
        144,
        28,
        145,
        80,
        91,
        96,
        255,
        130,
        22,
        21,
        97,
        2,
        115,
        87,
        96,
        7,
        25,
        1,
        97,
        2,
        123,
        86,
        91,
        96,
        8,
        130,
        144,
        28,
        145,
        80,
        91,
        96,
        15,
        130,
        22,
        21,
        97,
        2,
        141,
        87,
        96,
        3,
        25,
        1,
        97,
        2,
        149,
        86,
        91,
        96,
        4,
        130,
        144,
        28,
        145,
        80,
        91,
        96,
        3,
        130,
        22,
        21,
        97,
        2,
        167,
        87,
        96,
        1,
        25,
        1,
        97,
        2,
        175,
        86,
        91,
        96,
        2,
        130,
        144,
        28,
        145,
        80,
        91,
        96,
        1,
        130,
        22,
        21,
        97,
        1,
        2,
        87,
        96,
        0,
        25,
        1,
        145,
        144,
        80,
        86,
        254,
        162,
        100,
        105,
        112,
        102,
        115,
        88,
        34,
        18,
        32,
        10,
        173,
        29,
        212,
        128,
        159,
        42,
        164,
        32,
        202,
        91,
        64,
        115,
        104,
        50,
        211,
        97,
        251,
        237,
        119,
        44,
        2,
        23,
        84,
        247,
        16,
        15,
        188,
        104,
        176,
        24,
        200,
        100,
        115,
        111,
        108,
        99,
        67,
        0,
        7,
        6,
        0,
        51,
    ];
    ///The deployed bytecode of the contract.
    pub static BITMATHTEST_DEPLOYED_BYTECODE: ::ethers::core::types::Bytes =
        ::ethers::core::types::Bytes::from_static(__DEPLOYED_BYTECODE);
    pub struct BitMathTest<M>(::ethers::contract::Contract<M>);
    impl<M> ::core::clone::Clone for BitMathTest<M> {
        fn clone(&self) -> Self {
            Self(::core::clone::Clone::clone(&self.0))
        }
    }
    impl<M> ::core::ops::Deref for BitMathTest<M> {
        type Target = ::ethers::contract::Contract<M>;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl<M> ::core::ops::DerefMut for BitMathTest<M> {
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl<M> ::core::fmt::Debug for BitMathTest<M> {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple(stringify!(BitMathTest))
                .field(&self.address())
                .finish()
        }
    }
    impl<M: ::ethers::providers::Middleware> BitMathTest<M> {
        /// Creates a new contract instance with the specified `ethers` client at
        /// `address`. The contract derefs to a `ethers::Contract` object.
        pub fn new<T: Into<::ethers::core::types::Address>>(
            address: T,
            client: ::std::sync::Arc<M>,
        ) -> Self {
            Self(::ethers::contract::Contract::new(
                address.into(),
                BITMATHTEST_ABI.clone(),
                client,
            ))
        }
        /// Constructs the general purpose `Deployer` instance based on the provided constructor arguments and sends it.
        /// Returns a new instance of a deployer that returns an instance of this contract after sending the transaction
        ///
        /// Notes:
        /// - If there are no constructor arguments, you should pass `()` as the argument.
        /// - The default poll duration is 7 seconds.
        /// - The default number of confirmations is 1 block.
        ///
        ///
        /// # Example
        ///
        /// Generate contract bindings with `abigen!` and deploy a new contract instance.
        ///
        /// *Note*: this requires a `bytecode` and `abi` object in the `greeter.json` artifact.
        ///
        /// ```ignore
        /// # async fn deploy<M: ethers::providers::Middleware>(client: ::std::sync::Arc<M>) {
        ///     abigen!(Greeter, "../greeter.json");
        ///
        ///    let greeter_contract = Greeter::deploy(client, "Hello world!".to_string()).unwrap().send().await.unwrap();
        ///    let msg = greeter_contract.greet().call().await.unwrap();
        /// # }
        /// ```
        pub fn deploy<T: ::ethers::core::abi::Tokenize>(
            client: ::std::sync::Arc<M>,
            constructor_args: T,
        ) -> ::core::result::Result<
            ::ethers::contract::builders::ContractDeployer<M, Self>,
            ::ethers::contract::ContractError<M>,
        > {
            let factory = ::ethers::contract::ContractFactory::new(
                BITMATHTEST_ABI.clone(),
                BITMATHTEST_BYTECODE.clone().into(),
                client,
            );
            let deployer = factory.deploy(constructor_args)?;
            let deployer = ::ethers::contract::ContractDeployer::new(deployer);
            Ok(deployer)
        }
        ///Calls the contract's `getGasCostOfLeastSignificantBit` (0x6b83cf26) function
        pub fn get_gas_cost_of_least_significant_bit(
            &self,
            x: ::ethers::core::types::U256,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash([107, 131, 207, 38], x)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `getGasCostOfMostSignificantBit` (0x0046b777) function
        pub fn get_gas_cost_of_most_significant_bit(
            &self,
            x: ::ethers::core::types::U256,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash([0, 70, 183, 119], x)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `leastSignificantBit` (0xd230d23f) function
        pub fn least_significant_bit(
            &self,
            x: ::ethers::core::types::U256,
        ) -> ::ethers::contract::builders::ContractCall<M, u8> {
            self.0
                .method_hash([210, 48, 210, 63], x)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `mostSignificantBit` (0xe6bcbc65) function
        pub fn most_significant_bit(
            &self,
            x: ::ethers::core::types::U256,
        ) -> ::ethers::contract::builders::ContractCall<M, u8> {
            self.0
                .method_hash([230, 188, 188, 101], x)
                .expect("method not found (this should never happen)")
        }
    }
    impl<M: ::ethers::providers::Middleware> From<::ethers::contract::Contract<M>> for BitMathTest<M> {
        fn from(contract: ::ethers::contract::Contract<M>) -> Self {
            Self::new(contract.address(), contract.client())
        }
    }
    ///Container type for all input parameters for the `getGasCostOfLeastSignificantBit` function with signature `getGasCostOfLeastSignificantBit(uint256)` and selector `0x6b83cf26`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    #[ethcall(
        name = "getGasCostOfLeastSignificantBit",
        abi = "getGasCostOfLeastSignificantBit(uint256)"
    )]
    pub struct GetGasCostOfLeastSignificantBitCall {
        pub x: ::ethers::core::types::U256,
    }
    ///Container type for all input parameters for the `getGasCostOfMostSignificantBit` function with signature `getGasCostOfMostSignificantBit(uint256)` and selector `0x0046b777`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    #[ethcall(
        name = "getGasCostOfMostSignificantBit",
        abi = "getGasCostOfMostSignificantBit(uint256)"
    )]
    pub struct GetGasCostOfMostSignificantBitCall {
        pub x: ::ethers::core::types::U256,
    }
    ///Container type for all input parameters for the `leastSignificantBit` function with signature `leastSignificantBit(uint256)` and selector `0xd230d23f`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    #[ethcall(name = "leastSignificantBit", abi = "leastSignificantBit(uint256)")]
    pub struct LeastSignificantBitCall {
        pub x: ::ethers::core::types::U256,
    }
    ///Container type for all input parameters for the `mostSignificantBit` function with signature `mostSignificantBit(uint256)` and selector `0xe6bcbc65`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    #[ethcall(name = "mostSignificantBit", abi = "mostSignificantBit(uint256)")]
    pub struct MostSignificantBitCall {
        pub x: ::ethers::core::types::U256,
    }
    ///Container type for all of the contract's call
    #[derive(Clone, ::ethers::contract::EthAbiType, Debug, PartialEq, Eq, Hash)]
    pub enum BitMathTestCalls {
        GetGasCostOfLeastSignificantBit(GetGasCostOfLeastSignificantBitCall),
        GetGasCostOfMostSignificantBit(GetGasCostOfMostSignificantBitCall),
        LeastSignificantBit(LeastSignificantBitCall),
        MostSignificantBit(MostSignificantBitCall),
    }
    impl ::ethers::core::abi::AbiDecode for BitMathTestCalls {
        fn decode(
            data: impl AsRef<[u8]>,
        ) -> ::core::result::Result<Self, ::ethers::core::abi::AbiError> {
            let data = data.as_ref();
            if let Ok(decoded) =
                <GetGasCostOfLeastSignificantBitCall as ::ethers::core::abi::AbiDecode>::decode(
                    data,
                )
            {
                return Ok(Self::GetGasCostOfLeastSignificantBit(decoded));
            }
            if let Ok(decoded) =
                <GetGasCostOfMostSignificantBitCall as ::ethers::core::abi::AbiDecode>::decode(data)
            {
                return Ok(Self::GetGasCostOfMostSignificantBit(decoded));
            }
            if let Ok(decoded) =
                <LeastSignificantBitCall as ::ethers::core::abi::AbiDecode>::decode(data)
            {
                return Ok(Self::LeastSignificantBit(decoded));
            }
            if let Ok(decoded) =
                <MostSignificantBitCall as ::ethers::core::abi::AbiDecode>::decode(data)
            {
                return Ok(Self::MostSignificantBit(decoded));
            }
            Err(::ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ::ethers::core::abi::AbiEncode for BitMathTestCalls {
        fn encode(self) -> Vec<u8> {
            match self {
                Self::GetGasCostOfLeastSignificantBit(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::GetGasCostOfMostSignificantBit(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::LeastSignificantBit(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::MostSignificantBit(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
            }
        }
    }
    impl ::core::fmt::Display for BitMathTestCalls {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
                Self::GetGasCostOfLeastSignificantBit(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
                Self::GetGasCostOfMostSignificantBit(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
                Self::LeastSignificantBit(element) => ::core::fmt::Display::fmt(element, f),
                Self::MostSignificantBit(element) => ::core::fmt::Display::fmt(element, f),
            }
        }
    }
    impl ::core::convert::From<GetGasCostOfLeastSignificantBitCall> for BitMathTestCalls {
        fn from(value: GetGasCostOfLeastSignificantBitCall) -> Self {
            Self::GetGasCostOfLeastSignificantBit(value)
        }
    }
    impl ::core::convert::From<GetGasCostOfMostSignificantBitCall> for BitMathTestCalls {
        fn from(value: GetGasCostOfMostSignificantBitCall) -> Self {
            Self::GetGasCostOfMostSignificantBit(value)
        }
    }
    impl ::core::convert::From<LeastSignificantBitCall> for BitMathTestCalls {
        fn from(value: LeastSignificantBitCall) -> Self {
            Self::LeastSignificantBit(value)
        }
    }
    impl ::core::convert::From<MostSignificantBitCall> for BitMathTestCalls {
        fn from(value: MostSignificantBitCall) -> Self {
            Self::MostSignificantBit(value)
        }
    }
    ///Container type for all return fields from the `getGasCostOfLeastSignificantBit` function with signature `getGasCostOfLeastSignificantBit(uint256)` and selector `0x6b83cf26`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    pub struct GetGasCostOfLeastSignificantBitReturn(pub ::ethers::core::types::U256);
    ///Container type for all return fields from the `getGasCostOfMostSignificantBit` function with signature `getGasCostOfMostSignificantBit(uint256)` and selector `0x0046b777`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    pub struct GetGasCostOfMostSignificantBitReturn(pub ::ethers::core::types::U256);
    ///Container type for all return fields from the `leastSignificantBit` function with signature `leastSignificantBit(uint256)` and selector `0xd230d23f`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    pub struct LeastSignificantBitReturn {
        pub r: u8,
    }
    ///Container type for all return fields from the `mostSignificantBit` function with signature `mostSignificantBit(uint256)` and selector `0xe6bcbc65`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    pub struct MostSignificantBitReturn {
        pub r: u8,
    }
}
