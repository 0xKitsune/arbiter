pub use bar::*;
/// This module was auto-generated with ethers-rs Abigen.
/// More information at: <https://github.com/gakonst/ethers-rs>
#[allow(
    clippy::enum_variant_names,
    clippy::too_many_arguments,
    clippy::upper_case_acronyms,
    clippy::type_complexity,
    dead_code,
    non_camel_case_types,
)]
pub mod bar {
    #[rustfmt::skip]
    const __ABI: &str = "[{\"inputs\":[],\"stateMutability\":\"payable\",\"type\":\"constructor\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"expectedSender\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"payable\",\"type\":\"function\",\"name\":\"bar\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"expectedSender\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"payable\",\"type\":\"function\",\"name\":\"origin\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"expectedSender\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"expectedOrigin\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"payable\",\"type\":\"function\",\"name\":\"origin\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]}]";
    ///The parsed JSON ABI of the contract.
    pub static BAR_ABI: ::ethers::contract::Lazy<::ethers::core::abi::Abi> = ::ethers::contract::Lazy::new(||
    ::ethers::core::utils::__serde_json::from_str(__ABI).expect("ABI is always valid"));
    #[rustfmt::skip]
    const __BYTECODE: &[u8] = &[
        96,
        128,
        96,
        64,
        144,
        129,
        82,
        105,
        2,
        30,
        25,
        224,
        201,
        186,
        178,
        64,
        0,
        0,
        96,
        1,
        129,
        144,
        85,
        48,
        96,
        0,
        144,
        129,
        82,
        96,
        32,
        129,
        144,
        82,
        145,
        144,
        145,
        32,
        85,
        97,
        2,
        126,
        128,
        97,
        0,
        53,
        96,
        0,
        57,
        96,
        0,
        243,
        254,
        96,
        128,
        96,
        64,
        82,
        96,
        4,
        54,
        16,
        97,
        0,
        74,
        87,
        96,
        0,
        53,
        96,
        224,
        28,
        128,
        99,
        24,
        22,
        13,
        221,
        20,
        97,
        0,
        79,
        87,
        128,
        99,
        85,
        89,
        100,
        119,
        20,
        97,
        0,
        119,
        87,
        128,
        99,
        100,
        110,
        165,
        109,
        20,
        97,
        0,
        140,
        87,
        128,
        99,
        112,
        160,
        130,
        49,
        20,
        97,
        0,
        159,
        87,
        128,
        99,
        169,
        178,
        226,
        138,
        20,
        97,
        0,
        204,
        87,
        91,
        96,
        0,
        128,
        253,
        91,
        52,
        128,
        21,
        97,
        0,
        91,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        97,
        0,
        101,
        96,
        1,
        84,
        129,
        86,
        91,
        96,
        64,
        81,
        144,
        129,
        82,
        96,
        32,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        243,
        91,
        97,
        0,
        138,
        97,
        0,
        133,
        54,
        96,
        4,
        97,
        1,
        211,
        86,
        91,
        97,
        0,
        223,
        86,
        91,
        0,
        91,
        97,
        0,
        138,
        97,
        0,
        154,
        54,
        96,
        4,
        97,
        1,
        211,
        86,
        91,
        97,
        1,
        59,
        86,
        91,
        52,
        128,
        21,
        97,
        0,
        171,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        97,
        0,
        101,
        97,
        0,
        186,
        54,
        96,
        4,
        97,
        1,
        211,
        86,
        91,
        96,
        0,
        96,
        32,
        129,
        144,
        82,
        144,
        129,
        82,
        96,
        64,
        144,
        32,
        84,
        129,
        86,
        91,
        97,
        0,
        138,
        97,
        0,
        218,
        54,
        96,
        4,
        97,
        1,
        245,
        86,
        91,
        97,
        1,
        99,
        86,
        91,
        51,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        130,
        22,
        20,
        97,
        1,
        16,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        4,
        1,
        97,
        1,
        7,
        144,
        97,
        2,
        40,
        86,
        91,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        50,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        130,
        22,
        20,
        97,
        1,
        56,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        4,
        1,
        97,
        1,
        7,
        144,
        97,
        2,
        40,
        86,
        91,
        80,
        86,
        91,
        51,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        130,
        22,
        20,
        97,
        1,
        56,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        4,
        1,
        97,
        1,
        7,
        144,
        97,
        2,
        40,
        86,
        91,
        51,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        131,
        22,
        20,
        97,
        1,
        139,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        4,
        1,
        97,
        1,
        7,
        144,
        97,
        2,
        40,
        86,
        91,
        50,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        130,
        22,
        20,
        97,
        1,
        179,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        4,
        1,
        97,
        1,
        7,
        144,
        97,
        2,
        40,
        86,
        91,
        80,
        80,
        86,
        91,
        128,
        53,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        129,
        22,
        129,
        20,
        97,
        1,
        206,
        87,
        96,
        0,
        128,
        253,
        91,
        145,
        144,
        80,
        86,
        91,
        96,
        0,
        96,
        32,
        130,
        132,
        3,
        18,
        21,
        97,
        1,
        229,
        87,
        96,
        0,
        128,
        253,
        91,
        97,
        1,
        238,
        130,
        97,
        1,
        183,
        86,
        91,
        147,
        146,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        128,
        96,
        64,
        131,
        133,
        3,
        18,
        21,
        97,
        2,
        8,
        87,
        96,
        0,
        128,
        253,
        91,
        97,
        2,
        17,
        131,
        97,
        1,
        183,
        86,
        91,
        145,
        80,
        97,
        2,
        31,
        96,
        32,
        132,
        1,
        97,
        1,
        183,
        86,
        91,
        144,
        80,
        146,
        80,
        146,
        144,
        80,
        86,
        91,
        96,
        32,
        128,
        130,
        82,
        96,
        6,
        144,
        130,
        1,
        82,
        101,
        33,
        112,
        114,
        97,
        110,
        107,
        96,
        208,
        27,
        96,
        64,
        130,
        1,
        82,
        96,
        96,
        1,
        144,
        86,
        254,
        162,
        100,
        105,
        112,
        102,
        115,
        88,
        34,
        18,
        32,
        97,
        162,
        134,
        97,
        96,
        54,
        97,
        233,
        220,
        31,
        84,
        111,
        125,
        76,
        120,
        178,
        96,
        39,
        159,
        107,
        144,
        61,
        255,
        202,
        188,
        102,
        190,
        48,
        17,
        29,
        248,
        17,
        100,
        115,
        111,
        108,
        99,
        67,
        0,
        8,
        19,
        0,
        51,
    ];
    ///The bytecode of the contract.
    pub static BAR_BYTECODE: ::ethers::core::types::Bytes = ::ethers::core::types::Bytes::from_static(
        __BYTECODE,
    );
    #[rustfmt::skip]
    const __DEPLOYED_BYTECODE: &[u8] = &[
        96,
        128,
        96,
        64,
        82,
        96,
        4,
        54,
        16,
        97,
        0,
        74,
        87,
        96,
        0,
        53,
        96,
        224,
        28,
        128,
        99,
        24,
        22,
        13,
        221,
        20,
        97,
        0,
        79,
        87,
        128,
        99,
        85,
        89,
        100,
        119,
        20,
        97,
        0,
        119,
        87,
        128,
        99,
        100,
        110,
        165,
        109,
        20,
        97,
        0,
        140,
        87,
        128,
        99,
        112,
        160,
        130,
        49,
        20,
        97,
        0,
        159,
        87,
        128,
        99,
        169,
        178,
        226,
        138,
        20,
        97,
        0,
        204,
        87,
        91,
        96,
        0,
        128,
        253,
        91,
        52,
        128,
        21,
        97,
        0,
        91,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        97,
        0,
        101,
        96,
        1,
        84,
        129,
        86,
        91,
        96,
        64,
        81,
        144,
        129,
        82,
        96,
        32,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        243,
        91,
        97,
        0,
        138,
        97,
        0,
        133,
        54,
        96,
        4,
        97,
        1,
        211,
        86,
        91,
        97,
        0,
        223,
        86,
        91,
        0,
        91,
        97,
        0,
        138,
        97,
        0,
        154,
        54,
        96,
        4,
        97,
        1,
        211,
        86,
        91,
        97,
        1,
        59,
        86,
        91,
        52,
        128,
        21,
        97,
        0,
        171,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        97,
        0,
        101,
        97,
        0,
        186,
        54,
        96,
        4,
        97,
        1,
        211,
        86,
        91,
        96,
        0,
        96,
        32,
        129,
        144,
        82,
        144,
        129,
        82,
        96,
        64,
        144,
        32,
        84,
        129,
        86,
        91,
        97,
        0,
        138,
        97,
        0,
        218,
        54,
        96,
        4,
        97,
        1,
        245,
        86,
        91,
        97,
        1,
        99,
        86,
        91,
        51,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        130,
        22,
        20,
        97,
        1,
        16,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        4,
        1,
        97,
        1,
        7,
        144,
        97,
        2,
        40,
        86,
        91,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        50,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        130,
        22,
        20,
        97,
        1,
        56,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        4,
        1,
        97,
        1,
        7,
        144,
        97,
        2,
        40,
        86,
        91,
        80,
        86,
        91,
        51,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        130,
        22,
        20,
        97,
        1,
        56,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        4,
        1,
        97,
        1,
        7,
        144,
        97,
        2,
        40,
        86,
        91,
        51,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        131,
        22,
        20,
        97,
        1,
        139,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        4,
        1,
        97,
        1,
        7,
        144,
        97,
        2,
        40,
        86,
        91,
        50,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        130,
        22,
        20,
        97,
        1,
        179,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        4,
        1,
        97,
        1,
        7,
        144,
        97,
        2,
        40,
        86,
        91,
        80,
        80,
        86,
        91,
        128,
        53,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        129,
        22,
        129,
        20,
        97,
        1,
        206,
        87,
        96,
        0,
        128,
        253,
        91,
        145,
        144,
        80,
        86,
        91,
        96,
        0,
        96,
        32,
        130,
        132,
        3,
        18,
        21,
        97,
        1,
        229,
        87,
        96,
        0,
        128,
        253,
        91,
        97,
        1,
        238,
        130,
        97,
        1,
        183,
        86,
        91,
        147,
        146,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        128,
        96,
        64,
        131,
        133,
        3,
        18,
        21,
        97,
        2,
        8,
        87,
        96,
        0,
        128,
        253,
        91,
        97,
        2,
        17,
        131,
        97,
        1,
        183,
        86,
        91,
        145,
        80,
        97,
        2,
        31,
        96,
        32,
        132,
        1,
        97,
        1,
        183,
        86,
        91,
        144,
        80,
        146,
        80,
        146,
        144,
        80,
        86,
        91,
        96,
        32,
        128,
        130,
        82,
        96,
        6,
        144,
        130,
        1,
        82,
        101,
        33,
        112,
        114,
        97,
        110,
        107,
        96,
        208,
        27,
        96,
        64,
        130,
        1,
        82,
        96,
        96,
        1,
        144,
        86,
        254,
        162,
        100,
        105,
        112,
        102,
        115,
        88,
        34,
        18,
        32,
        97,
        162,
        134,
        97,
        96,
        54,
        97,
        233,
        220,
        31,
        84,
        111,
        125,
        76,
        120,
        178,
        96,
        39,
        159,
        107,
        144,
        61,
        255,
        202,
        188,
        102,
        190,
        48,
        17,
        29,
        248,
        17,
        100,
        115,
        111,
        108,
        99,
        67,
        0,
        8,
        19,
        0,
        51,
    ];
    ///The deployed bytecode of the contract.
    pub static BAR_DEPLOYED_BYTECODE: ::ethers::core::types::Bytes = ::ethers::core::types::Bytes::from_static(
        __DEPLOYED_BYTECODE,
    );
    pub struct Bar<M>(::ethers::contract::Contract<M>);
    impl<M> ::core::clone::Clone for Bar<M> {
        fn clone(&self) -> Self {
            Self(::core::clone::Clone::clone(&self.0))
        }
    }
    impl<M> ::core::ops::Deref for Bar<M> {
        type Target = ::ethers::contract::Contract<M>;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl<M> ::core::ops::DerefMut for Bar<M> {
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl<M> ::core::fmt::Debug for Bar<M> {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple(stringify!(Bar)).field(&self.address()).finish()
        }
    }
    impl<M: ::ethers::providers::Middleware> Bar<M> {
        /// Creates a new contract instance with the specified `ethers` client at
        /// `address`. The contract derefs to a `ethers::Contract` object.
        pub fn new<T: Into<::ethers::core::types::Address>>(
            address: T,
            client: ::std::sync::Arc<M>,
        ) -> Self {
            Self(
                ::ethers::contract::Contract::new(
                    address.into(),
                    BAR_ABI.clone(),
                    client,
                ),
            )
        }
        /// Constructs the general purpose `Deployer` instance based on the provided constructor arguments and sends it.
        /// Returns a new instance of a deployer that returns an instance of this contract after sending the transaction
        ///
        /// Notes:
        /// - If there are no constructor arguments, you should pass `()` as the argument.
        /// - The default poll duration is 7 seconds.
        /// - The default number of confirmations is 1 block.
        ///
        ///
        /// # Example
        ///
        /// Generate contract bindings with `abigen!` and deploy a new contract instance.
        ///
        /// *Note*: this requires a `bytecode` and `abi` object in the `greeter.json` artifact.
        ///
        /// ```ignore
        /// # async fn deploy<M: ethers::providers::Middleware>(client: ::std::sync::Arc<M>) {
        ///     abigen!(Greeter, "../greeter.json");
        ///
        ///    let greeter_contract = Greeter::deploy(client, "Hello world!".to_string()).unwrap().send().await.unwrap();
        ///    let msg = greeter_contract.greet().call().await.unwrap();
        /// # }
        /// ```
        pub fn deploy<T: ::ethers::core::abi::Tokenize>(
            client: ::std::sync::Arc<M>,
            constructor_args: T,
        ) -> ::core::result::Result<
            ::ethers::contract::builders::ContractDeployer<M, Self>,
            ::ethers::contract::ContractError<M>,
        > {
            let factory = ::ethers::contract::ContractFactory::new(
                BAR_ABI.clone(),
                BAR_BYTECODE.clone().into(),
                client,
            );
            let deployer = factory.deploy(constructor_args)?;
            let deployer = ::ethers::contract::ContractDeployer::new(deployer);
            Ok(deployer)
        }
        ///Calls the contract's `balanceOf` (0x70a08231) function
        pub fn balance_of(
            &self,
            p0: ::ethers::core::types::Address,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash([112, 160, 130, 49], p0)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `bar` (0x646ea56d) function
        pub fn bar(
            &self,
            expected_sender: ::ethers::core::types::Address,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([100, 110, 165, 109], expected_sender)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `origin` (0x55596477) function
        pub fn origin(
            &self,
            expected_sender: ::ethers::core::types::Address,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([85, 89, 100, 119], expected_sender)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `origin` (0xa9b2e28a) function
        pub fn origin_with_expected_origin(
            &self,
            expected_sender: ::ethers::core::types::Address,
            expected_origin: ::ethers::core::types::Address,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([169, 178, 226, 138], (expected_sender, expected_origin))
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `totalSupply` (0x18160ddd) function
        pub fn total_supply(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash([24, 22, 13, 221], ())
                .expect("method not found (this should never happen)")
        }
    }
    impl<M: ::ethers::providers::Middleware> From<::ethers::contract::Contract<M>>
    for Bar<M> {
        fn from(contract: ::ethers::contract::Contract<M>) -> Self {
            Self::new(contract.address(), contract.client())
        }
    }
    ///Container type for all input parameters for the `balanceOf` function with signature `balanceOf(address)` and selector `0x70a08231`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "balanceOf", abi = "balanceOf(address)")]
    pub struct BalanceOfCall(pub ::ethers::core::types::Address);
    ///Container type for all input parameters for the `bar` function with signature `bar(address)` and selector `0x646ea56d`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "bar", abi = "bar(address)")]
    pub struct BarCall {
        pub expected_sender: ::ethers::core::types::Address,
    }
    ///Container type for all input parameters for the `origin` function with signature `origin(address)` and selector `0x55596477`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "origin", abi = "origin(address)")]
    pub struct OriginCall {
        pub expected_sender: ::ethers::core::types::Address,
    }
    ///Container type for all input parameters for the `origin` function with signature `origin(address,address)` and selector `0xa9b2e28a`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "origin", abi = "origin(address,address)")]
    pub struct OriginWithExpectedOriginCall {
        pub expected_sender: ::ethers::core::types::Address,
        pub expected_origin: ::ethers::core::types::Address,
    }
    ///Container type for all input parameters for the `totalSupply` function with signature `totalSupply()` and selector `0x18160ddd`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "totalSupply", abi = "totalSupply()")]
    pub struct TotalSupplyCall;
    ///Container type for all of the contract's call
    #[derive(Clone, ::ethers::contract::EthAbiType, Debug, PartialEq, Eq, Hash)]
    pub enum BarCalls {
        BalanceOf(BalanceOfCall),
        Bar(BarCall),
        Origin(OriginCall),
        OriginWithExpectedOrigin(OriginWithExpectedOriginCall),
        TotalSupply(TotalSupplyCall),
    }
    impl ::ethers::core::abi::AbiDecode for BarCalls {
        fn decode(
            data: impl AsRef<[u8]>,
        ) -> ::core::result::Result<Self, ::ethers::core::abi::AbiError> {
            let data = data.as_ref();
            if let Ok(decoded)
                = <BalanceOfCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::BalanceOf(decoded));
            }
            if let Ok(decoded)
                = <BarCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::Bar(decoded));
            }
            if let Ok(decoded)
                = <OriginCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::Origin(decoded));
            }
            if let Ok(decoded)
                = <OriginWithExpectedOriginCall as ::ethers::core::abi::AbiDecode>::decode(
                    data,
                ) {
                return Ok(Self::OriginWithExpectedOrigin(decoded));
            }
            if let Ok(decoded)
                = <TotalSupplyCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::TotalSupply(decoded));
            }
            Err(::ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ::ethers::core::abi::AbiEncode for BarCalls {
        fn encode(self) -> Vec<u8> {
            match self {
                Self::BalanceOf(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::Bar(element) => ::ethers::core::abi::AbiEncode::encode(element),
                Self::Origin(element) => ::ethers::core::abi::AbiEncode::encode(element),
                Self::OriginWithExpectedOrigin(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::TotalSupply(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
            }
        }
    }
    impl ::core::fmt::Display for BarCalls {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
                Self::BalanceOf(element) => ::core::fmt::Display::fmt(element, f),
                Self::Bar(element) => ::core::fmt::Display::fmt(element, f),
                Self::Origin(element) => ::core::fmt::Display::fmt(element, f),
                Self::OriginWithExpectedOrigin(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
                Self::TotalSupply(element) => ::core::fmt::Display::fmt(element, f),
            }
        }
    }
    impl ::core::convert::From<BalanceOfCall> for BarCalls {
        fn from(value: BalanceOfCall) -> Self {
            Self::BalanceOf(value)
        }
    }
    impl ::core::convert::From<BarCall> for BarCalls {
        fn from(value: BarCall) -> Self {
            Self::Bar(value)
        }
    }
    impl ::core::convert::From<OriginCall> for BarCalls {
        fn from(value: OriginCall) -> Self {
            Self::Origin(value)
        }
    }
    impl ::core::convert::From<OriginWithExpectedOriginCall> for BarCalls {
        fn from(value: OriginWithExpectedOriginCall) -> Self {
            Self::OriginWithExpectedOrigin(value)
        }
    }
    impl ::core::convert::From<TotalSupplyCall> for BarCalls {
        fn from(value: TotalSupplyCall) -> Self {
            Self::TotalSupply(value)
        }
    }
    ///Container type for all return fields from the `balanceOf` function with signature `balanceOf(address)` and selector `0x70a08231`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct BalanceOfReturn(pub ::ethers::core::types::U256);
    ///Container type for all return fields from the `totalSupply` function with signature `totalSupply()` and selector `0x18160ddd`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct TotalSupplyReturn(pub ::ethers::core::types::U256);
}
