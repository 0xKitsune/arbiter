pub use mock_observations::*;
/// This module was auto-generated with ethers-rs Abigen.
/// More information at: <https://github.com/gakonst/ethers-rs>
#[allow(
    clippy::enum_variant_names,
    clippy::too_many_arguments,
    clippy::upper_case_acronyms,
    clippy::type_complexity,
    dead_code,
    non_camel_case_types,
)]
pub mod mock_observations {
    #[rustfmt::skip]
    const __ABI: &str = "[{\"inputs\":[{\"internalType\":\"uint32[4]\",\"name\":\"_blockTimestamps\",\"type\":\"uint32[4]\",\"components\":[]},{\"internalType\":\"int56[4]\",\"name\":\"_tickCumulatives\",\"type\":\"int56[4]\",\"components\":[]},{\"internalType\":\"uint128[4]\",\"name\":\"_secondsPerLiquidityCumulativeX128s\",\"type\":\"uint128[4]\",\"components\":[]},{\"internalType\":\"bool[4]\",\"name\":\"_initializeds\",\"type\":\"bool[4]\",\"components\":[]},{\"internalType\":\"int24\",\"name\":\"_tick\",\"type\":\"int24\",\"components\":[]},{\"internalType\":\"uint16\",\"name\":\"_observationCardinality\",\"type\":\"uint16\",\"components\":[]},{\"internalType\":\"uint16\",\"name\":\"_observationIndex\",\"type\":\"uint16\",\"components\":[]},{\"internalType\":\"bool\",\"name\":\"_lastObservationCurrentTimestamp\",\"type\":\"bool\",\"components\":[]},{\"internalType\":\"uint128\",\"name\":\"_liquidity\",\"type\":\"uint128\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"liquidity\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"observations\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\",\"components\":[]},{\"internalType\":\"int56\",\"name\":\"\",\"type\":\"int56\",\"components\":[]},{\"internalType\":\"uint160\",\"name\":\"\",\"type\":\"uint160\",\"components\":[]},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"slot0\",\"outputs\":[{\"internalType\":\"uint160\",\"name\":\"\",\"type\":\"uint160\",\"components\":[]},{\"internalType\":\"int24\",\"name\":\"\",\"type\":\"int24\",\"components\":[]},{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\",\"components\":[]},{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\",\"components\":[]},{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\",\"components\":[]},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\",\"components\":[]},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]}]";
    ///The parsed JSON ABI of the contract.
    pub static MOCKOBSERVATIONS_ABI: ::ethers::contract::Lazy<
        ::ethers::core::abi::Abi,
    > = ::ethers::contract::Lazy::new(|| {
        ::ethers::core::utils::__serde_json::from_str(__ABI)
            .expect("ABI is always valid")
    });
    #[rustfmt::skip]
    const __BYTECODE: &[u8] = &[
        96,
        128,
        96,
        64,
        82,
        52,
        128,
        21,
        97,
        0,
        86,
        87,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        96,
        0,
        144,
        129,
        82,
        96,
        32,
        96,
        4,
        82,
        96,
        34,
        96,
        36,
        82,
        127,
        69,
        116,
        104,
        101,
        114,
        32,
        115,
        101,
        110,
        116,
        32,
        116,
        111,
        32,
        110,
        111,
        110,
        45,
        112,
        97,
        121,
        97,
        98,
        108,
        101,
        32,
        102,
        117,
        110,
        99,
        116,
        105,
        96,
        68,
        144,
        129,
        82,
        97,
        55,
        183,
        96,
        241,
        27,
        96,
        100,
        82,
        144,
        96,
        132,
        144,
        253,
        91,
        80,
        96,
        64,
        81,
        97,
        5,
        245,
        56,
        3,
        128,
        97,
        5,
        245,
        131,
        57,
        129,
        129,
        1,
        96,
        64,
        82,
        97,
        2,
        160,
        129,
        16,
        21,
        97,
        0,
        172,
        87,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        96,
        0,
        144,
        129,
        82,
        96,
        32,
        96,
        4,
        82,
        96,
        18,
        96,
        36,
        82,
        113,
        16,
        216,
        91,
        27,
        25,
        24,
        93,
        24,
        72,
        29,
        27,
        219,
        200,
        28,
        218,
        27,
        220,
        157,
        96,
        114,
        27,
        96,
        68,
        144,
        129,
        82,
        144,
        96,
        100,
        144,
        253,
        91,
        80,
        97,
        2,
        0,
        129,
        1,
        81,
        97,
        2,
        32,
        130,
        1,
        81,
        97,
        2,
        64,
        131,
        1,
        81,
        97,
        2,
        96,
        132,
        1,
        81,
        97,
        2,
        128,
        133,
        1,
        81,
        96,
        128,
        134,
        1,
        148,
        97,
        1,
        0,
        135,
        1,
        148,
        97,
        1,
        128,
        136,
        1,
        148,
        145,
        147,
        144,
        146,
        96,
        0,
        91,
        96,
        4,
        129,
        16,
        21,
        97,
        2,
        20,
        87,
        96,
        64,
        81,
        128,
        96,
        128,
        1,
        96,
        64,
        82,
        128,
        139,
        131,
        96,
        4,
        129,
        16,
        97,
        1,
        3,
        87,
        254,
        91,
        96,
        32,
        2,
        1,
        81,
        99,
        255,
        255,
        255,
        255,
        22,
        129,
        82,
        96,
        32,
        1,
        138,
        131,
        96,
        4,
        129,
        16,
        97,
        1,
        31,
        87,
        254,
        91,
        96,
        32,
        2,
        1,
        81,
        96,
        6,
        11,
        129,
        82,
        96,
        32,
        1,
        137,
        131,
        96,
        4,
        129,
        16,
        97,
        1,
        56,
        87,
        254,
        91,
        96,
        32,
        2,
        1,
        81,
        96,
        1,
        96,
        1,
        96,
        128,
        27,
        3,
        22,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        129,
        82,
        96,
        32,
        1,
        136,
        131,
        96,
        4,
        129,
        16,
        97,
        1,
        96,
        87,
        254,
        91,
        96,
        32,
        2,
        1,
        81,
        21,
        21,
        144,
        82,
        96,
        0,
        130,
        96,
        4,
        129,
        16,
        97,
        1,
        118,
        87,
        254,
        91,
        130,
        81,
        145,
        1,
        128,
        84,
        96,
        32,
        132,
        1,
        81,
        96,
        64,
        133,
        1,
        81,
        96,
        96,
        144,
        149,
        1,
        81,
        21,
        21,
        96,
        1,
        96,
        248,
        27,
        2,
        96,
        1,
        96,
        1,
        96,
        248,
        27,
        3,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        144,
        150,
        22,
        107,
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        2,
        96,
        1,
        96,
        88,
        27,
        96,
        1,
        96,
        248,
        27,
        3,
        25,
        96,
        6,
        147,
        144,
        147,
        11,
        102,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        22,
        100,
        1,
        0,
        0,
        0,
        0,
        2,
        102,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        96,
        32,
        27,
        25,
        99,
        255,
        255,
        255,
        255,
        144,
        151,
        22,
        99,
        255,
        255,
        255,
        255,
        25,
        144,
        149,
        22,
        148,
        144,
        148,
        23,
        149,
        144,
        149,
        22,
        146,
        144,
        146,
        23,
        22,
        146,
        144,
        146,
        23,
        146,
        144,
        146,
        22,
        23,
        144,
        85,
        96,
        1,
        1,
        97,
        0,
        227,
        86,
        91,
        80,
        96,
        4,
        128,
        84,
        98,
        255,
        255,
        255,
        25,
        22,
        98,
        255,
        255,
        255,
        96,
        2,
        151,
        144,
        151,
        11,
        150,
        144,
        150,
        22,
        149,
        144,
        149,
        23,
        100,
        255,
        255,
        0,
        0,
        0,
        25,
        22,
        99,
        1,
        0,
        0,
        0,
        97,
        255,
        255,
        149,
        134,
        22,
        2,
        23,
        97,
        255,
        255,
        96,
        40,
        27,
        25,
        22,
        101,
        1,
        0,
        0,
        0,
        0,
        0,
        147,
        144,
        148,
        22,
        146,
        144,
        146,
        2,
        146,
        144,
        146,
        23,
        96,
        255,
        96,
        184,
        27,
        25,
        22,
        96,
        1,
        96,
        184,
        27,
        146,
        21,
        21,
        146,
        144,
        146,
        2,
        145,
        144,
        145,
        23,
        96,
        1,
        96,
        56,
        27,
        96,
        1,
        96,
        184,
        27,
        3,
        25,
        22,
        103,
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        96,
        1,
        96,
        1,
        96,
        128,
        27,
        3,
        146,
        144,
        146,
        22,
        145,
        144,
        145,
        2,
        23,
        144,
        85,
        80,
        97,
        3,
        62,
        146,
        80,
        130,
        145,
        80,
        97,
        2,
        183,
        144,
        80,
        96,
        0,
        57,
        96,
        0,
        243,
        254,
        96,
        128,
        96,
        64,
        82,
        52,
        128,
        21,
        97,
        0,
        86,
        87,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        96,
        0,
        144,
        129,
        82,
        96,
        32,
        96,
        4,
        82,
        96,
        34,
        96,
        36,
        82,
        127,
        69,
        116,
        104,
        101,
        114,
        32,
        115,
        101,
        110,
        116,
        32,
        116,
        111,
        32,
        110,
        111,
        110,
        45,
        112,
        97,
        121,
        97,
        98,
        108,
        101,
        32,
        102,
        117,
        110,
        99,
        116,
        105,
        96,
        68,
        144,
        129,
        82,
        97,
        55,
        183,
        96,
        241,
        27,
        96,
        100,
        82,
        144,
        96,
        132,
        144,
        253,
        91,
        80,
        96,
        4,
        54,
        16,
        97,
        0,
        135,
        87,
        96,
        0,
        53,
        96,
        224,
        28,
        128,
        99,
        26,
        104,
        101,
        2,
        20,
        97,
        0,
        229,
        87,
        128,
        99,
        37,
        44,
        9,
        215,
        20,
        97,
        1,
        9,
        87,
        128,
        99,
        56,
        80,
        199,
        189,
        20,
        97,
        1,
        146,
        87,
        91,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        96,
        0,
        144,
        129,
        82,
        96,
        32,
        96,
        4,
        82,
        96,
        53,
        96,
        36,
        82,
        127,
        67,
        111,
        110,
        116,
        114,
        97,
        99,
        116,
        32,
        100,
        111,
        101,
        115,
        32,
        110,
        111,
        116,
        32,
        104,
        97,
        118,
        101,
        32,
        102,
        97,
        108,
        108,
        98,
        97,
        99,
        107,
        32,
        96,
        68,
        144,
        129,
        82,
        116,
        110,
        111,
        114,
        32,
        114,
        101,
        99,
        101,
        105,
        118,
        101,
        32,
        102,
        117,
        110,
        99,
        116,
        105,
        111,
        110,
        115,
        96,
        88,
        27,
        96,
        100,
        82,
        144,
        96,
        132,
        144,
        253,
        91,
        97,
        0,
        237,
        97,
        1,
        235,
        86,
        91,
        96,
        64,
        128,
        81,
        96,
        1,
        96,
        1,
        96,
        128,
        27,
        3,
        144,
        146,
        22,
        130,
        82,
        81,
        144,
        129,
        144,
        3,
        96,
        32,
        1,
        144,
        243,
        91,
        97,
        1,
        88,
        96,
        4,
        128,
        54,
        3,
        96,
        32,
        129,
        16,
        21,
        97,
        1,
        81,
        87,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        96,
        0,
        144,
        129,
        82,
        96,
        32,
        96,
        4,
        82,
        96,
        18,
        96,
        36,
        82,
        113,
        16,
        216,
        91,
        27,
        25,
        24,
        93,
        24,
        72,
        29,
        27,
        219,
        200,
        28,
        218,
        27,
        220,
        157,
        96,
        114,
        27,
        96,
        68,
        144,
        129,
        82,
        144,
        96,
        100,
        144,
        253,
        91,
        80,
        53,
        97,
        2,
        5,
        86,
        91,
        96,
        64,
        128,
        81,
        99,
        255,
        255,
        255,
        255,
        144,
        149,
        22,
        133,
        82,
        96,
        6,
        147,
        144,
        147,
        11,
        96,
        32,
        133,
        1,
        82,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        144,
        145,
        22,
        131,
        131,
        1,
        82,
        21,
        21,
        96,
        96,
        131,
        1,
        82,
        81,
        144,
        129,
        144,
        3,
        96,
        128,
        1,
        144,
        243,
        91,
        97,
        1,
        154,
        97,
        2,
        218,
        86,
        91,
        96,
        64,
        128,
        81,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        144,
        152,
        22,
        136,
        82,
        96,
        2,
        150,
        144,
        150,
        11,
        96,
        32,
        136,
        1,
        82,
        97,
        255,
        255,
        148,
        133,
        22,
        135,
        135,
        1,
        82,
        146,
        132,
        22,
        96,
        96,
        135,
        1,
        82,
        146,
        22,
        96,
        128,
        133,
        1,
        82,
        96,
        255,
        144,
        145,
        22,
        96,
        160,
        132,
        1,
        82,
        21,
        21,
        96,
        192,
        131,
        1,
        82,
        81,
        144,
        129,
        144,
        3,
        96,
        224,
        1,
        144,
        243,
        91,
        96,
        4,
        84,
        103,
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        144,
        4,
        96,
        1,
        96,
        1,
        96,
        128,
        27,
        3,
        22,
        129,
        86,
        91,
        96,
        0,
        128,
        96,
        0,
        128,
        96,
        0,
        128,
        134,
        96,
        4,
        129,
        16,
        97,
        2,
        25,
        87,
        254,
        91,
        96,
        64,
        128,
        81,
        96,
        128,
        129,
        1,
        130,
        82,
        146,
        144,
        145,
        1,
        84,
        99,
        255,
        255,
        255,
        255,
        129,
        22,
        131,
        82,
        100,
        1,
        0,
        0,
        0,
        0,
        129,
        4,
        96,
        6,
        144,
        129,
        11,
        129,
        11,
        144,
        11,
        96,
        32,
        132,
        1,
        82,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        96,
        1,
        96,
        88,
        27,
        130,
        4,
        22,
        145,
        131,
        1,
        145,
        144,
        145,
        82,
        96,
        255,
        96,
        1,
        96,
        248,
        27,
        144,
        145,
        4,
        129,
        22,
        21,
        21,
        96,
        96,
        131,
        1,
        82,
        96,
        4,
        84,
        145,
        146,
        80,
        96,
        1,
        96,
        184,
        27,
        144,
        145,
        4,
        22,
        21,
        97,
        2,
        185,
        87,
        128,
        81,
        96,
        4,
        128,
        84,
        96,
        0,
        145,
        101,
        1,
        0,
        0,
        0,
        0,
        0,
        144,
        145,
        4,
        97,
        255,
        255,
        22,
        144,
        129,
        16,
        97,
        2,
        165,
        87,
        254,
        91,
        1,
        84,
        99,
        255,
        255,
        255,
        255,
        144,
        129,
        22,
        145,
        144,
        145,
        3,
        66,
        3,
        22,
        129,
        82,
        91,
        128,
        81,
        96,
        32,
        130,
        1,
        81,
        96,
        64,
        131,
        1,
        81,
        96,
        96,
        144,
        147,
        1,
        81,
        145,
        152,
        144,
        151,
        80,
        145,
        149,
        80,
        147,
        80,
        145,
        80,
        80,
        86,
        91,
        96,
        4,
        84,
        96,
        0,
        144,
        96,
        2,
        129,
        144,
        11,
        144,
        97,
        255,
        255,
        101,
        1,
        0,
        0,
        0,
        0,
        0,
        130,
        4,
        129,
        22,
        145,
        99,
        1,
        0,
        0,
        0,
        144,
        4,
        22,
        131,
        128,
        128,
        145,
        146,
        147,
        148,
        149,
        150,
        86,
        254,
        162,
        100,
        105,
        112,
        102,
        115,
        88,
        34,
        18,
        32,
        170,
        161,
        76,
        228,
        68,
        217,
        251,
        53,
        49,
        74,
        75,
        219,
        18,
        11,
        224,
        211,
        230,
        8,
        200,
        195,
        52,
        108,
        121,
        131,
        244,
        0,
        234,
        164,
        98,
        186,
        19,
        151,
        100,
        115,
        111,
        108,
        99,
        67,
        0,
        7,
        6,
        0,
        51,
    ];
    ///The bytecode of the contract.
    pub static MOCKOBSERVATIONS_BYTECODE: ::ethers::core::types::Bytes = ::ethers::core::types::Bytes::from_static(
        __BYTECODE,
    );
    #[rustfmt::skip]
    const __DEPLOYED_BYTECODE: &[u8] = &[
        96,
        128,
        96,
        64,
        82,
        52,
        128,
        21,
        97,
        0,
        86,
        87,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        96,
        0,
        144,
        129,
        82,
        96,
        32,
        96,
        4,
        82,
        96,
        34,
        96,
        36,
        82,
        127,
        69,
        116,
        104,
        101,
        114,
        32,
        115,
        101,
        110,
        116,
        32,
        116,
        111,
        32,
        110,
        111,
        110,
        45,
        112,
        97,
        121,
        97,
        98,
        108,
        101,
        32,
        102,
        117,
        110,
        99,
        116,
        105,
        96,
        68,
        144,
        129,
        82,
        97,
        55,
        183,
        96,
        241,
        27,
        96,
        100,
        82,
        144,
        96,
        132,
        144,
        253,
        91,
        80,
        96,
        4,
        54,
        16,
        97,
        0,
        135,
        87,
        96,
        0,
        53,
        96,
        224,
        28,
        128,
        99,
        26,
        104,
        101,
        2,
        20,
        97,
        0,
        229,
        87,
        128,
        99,
        37,
        44,
        9,
        215,
        20,
        97,
        1,
        9,
        87,
        128,
        99,
        56,
        80,
        199,
        189,
        20,
        97,
        1,
        146,
        87,
        91,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        96,
        0,
        144,
        129,
        82,
        96,
        32,
        96,
        4,
        82,
        96,
        53,
        96,
        36,
        82,
        127,
        67,
        111,
        110,
        116,
        114,
        97,
        99,
        116,
        32,
        100,
        111,
        101,
        115,
        32,
        110,
        111,
        116,
        32,
        104,
        97,
        118,
        101,
        32,
        102,
        97,
        108,
        108,
        98,
        97,
        99,
        107,
        32,
        96,
        68,
        144,
        129,
        82,
        116,
        110,
        111,
        114,
        32,
        114,
        101,
        99,
        101,
        105,
        118,
        101,
        32,
        102,
        117,
        110,
        99,
        116,
        105,
        111,
        110,
        115,
        96,
        88,
        27,
        96,
        100,
        82,
        144,
        96,
        132,
        144,
        253,
        91,
        97,
        0,
        237,
        97,
        1,
        235,
        86,
        91,
        96,
        64,
        128,
        81,
        96,
        1,
        96,
        1,
        96,
        128,
        27,
        3,
        144,
        146,
        22,
        130,
        82,
        81,
        144,
        129,
        144,
        3,
        96,
        32,
        1,
        144,
        243,
        91,
        97,
        1,
        88,
        96,
        4,
        128,
        54,
        3,
        96,
        32,
        129,
        16,
        21,
        97,
        1,
        81,
        87,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        96,
        0,
        144,
        129,
        82,
        96,
        32,
        96,
        4,
        82,
        96,
        18,
        96,
        36,
        82,
        113,
        16,
        216,
        91,
        27,
        25,
        24,
        93,
        24,
        72,
        29,
        27,
        219,
        200,
        28,
        218,
        27,
        220,
        157,
        96,
        114,
        27,
        96,
        68,
        144,
        129,
        82,
        144,
        96,
        100,
        144,
        253,
        91,
        80,
        53,
        97,
        2,
        5,
        86,
        91,
        96,
        64,
        128,
        81,
        99,
        255,
        255,
        255,
        255,
        144,
        149,
        22,
        133,
        82,
        96,
        6,
        147,
        144,
        147,
        11,
        96,
        32,
        133,
        1,
        82,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        144,
        145,
        22,
        131,
        131,
        1,
        82,
        21,
        21,
        96,
        96,
        131,
        1,
        82,
        81,
        144,
        129,
        144,
        3,
        96,
        128,
        1,
        144,
        243,
        91,
        97,
        1,
        154,
        97,
        2,
        218,
        86,
        91,
        96,
        64,
        128,
        81,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        144,
        152,
        22,
        136,
        82,
        96,
        2,
        150,
        144,
        150,
        11,
        96,
        32,
        136,
        1,
        82,
        97,
        255,
        255,
        148,
        133,
        22,
        135,
        135,
        1,
        82,
        146,
        132,
        22,
        96,
        96,
        135,
        1,
        82,
        146,
        22,
        96,
        128,
        133,
        1,
        82,
        96,
        255,
        144,
        145,
        22,
        96,
        160,
        132,
        1,
        82,
        21,
        21,
        96,
        192,
        131,
        1,
        82,
        81,
        144,
        129,
        144,
        3,
        96,
        224,
        1,
        144,
        243,
        91,
        96,
        4,
        84,
        103,
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        144,
        4,
        96,
        1,
        96,
        1,
        96,
        128,
        27,
        3,
        22,
        129,
        86,
        91,
        96,
        0,
        128,
        96,
        0,
        128,
        96,
        0,
        128,
        134,
        96,
        4,
        129,
        16,
        97,
        2,
        25,
        87,
        254,
        91,
        96,
        64,
        128,
        81,
        96,
        128,
        129,
        1,
        130,
        82,
        146,
        144,
        145,
        1,
        84,
        99,
        255,
        255,
        255,
        255,
        129,
        22,
        131,
        82,
        100,
        1,
        0,
        0,
        0,
        0,
        129,
        4,
        96,
        6,
        144,
        129,
        11,
        129,
        11,
        144,
        11,
        96,
        32,
        132,
        1,
        82,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        96,
        1,
        96,
        88,
        27,
        130,
        4,
        22,
        145,
        131,
        1,
        145,
        144,
        145,
        82,
        96,
        255,
        96,
        1,
        96,
        248,
        27,
        144,
        145,
        4,
        129,
        22,
        21,
        21,
        96,
        96,
        131,
        1,
        82,
        96,
        4,
        84,
        145,
        146,
        80,
        96,
        1,
        96,
        184,
        27,
        144,
        145,
        4,
        22,
        21,
        97,
        2,
        185,
        87,
        128,
        81,
        96,
        4,
        128,
        84,
        96,
        0,
        145,
        101,
        1,
        0,
        0,
        0,
        0,
        0,
        144,
        145,
        4,
        97,
        255,
        255,
        22,
        144,
        129,
        16,
        97,
        2,
        165,
        87,
        254,
        91,
        1,
        84,
        99,
        255,
        255,
        255,
        255,
        144,
        129,
        22,
        145,
        144,
        145,
        3,
        66,
        3,
        22,
        129,
        82,
        91,
        128,
        81,
        96,
        32,
        130,
        1,
        81,
        96,
        64,
        131,
        1,
        81,
        96,
        96,
        144,
        147,
        1,
        81,
        145,
        152,
        144,
        151,
        80,
        145,
        149,
        80,
        147,
        80,
        145,
        80,
        80,
        86,
        91,
        96,
        4,
        84,
        96,
        0,
        144,
        96,
        2,
        129,
        144,
        11,
        144,
        97,
        255,
        255,
        101,
        1,
        0,
        0,
        0,
        0,
        0,
        130,
        4,
        129,
        22,
        145,
        99,
        1,
        0,
        0,
        0,
        144,
        4,
        22,
        131,
        128,
        128,
        145,
        146,
        147,
        148,
        149,
        150,
        86,
        254,
        162,
        100,
        105,
        112,
        102,
        115,
        88,
        34,
        18,
        32,
        170,
        161,
        76,
        228,
        68,
        217,
        251,
        53,
        49,
        74,
        75,
        219,
        18,
        11,
        224,
        211,
        230,
        8,
        200,
        195,
        52,
        108,
        121,
        131,
        244,
        0,
        234,
        164,
        98,
        186,
        19,
        151,
        100,
        115,
        111,
        108,
        99,
        67,
        0,
        7,
        6,
        0,
        51,
    ];
    ///The deployed bytecode of the contract.
    pub static MOCKOBSERVATIONS_DEPLOYED_BYTECODE: ::ethers::core::types::Bytes = ::ethers::core::types::Bytes::from_static(
        __DEPLOYED_BYTECODE,
    );
    pub struct MockObservations<M>(::ethers::contract::Contract<M>);
    impl<M> ::core::clone::Clone for MockObservations<M> {
        fn clone(&self) -> Self {
            Self(::core::clone::Clone::clone(&self.0))
        }
    }
    impl<M> ::core::ops::Deref for MockObservations<M> {
        type Target = ::ethers::contract::Contract<M>;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl<M> ::core::ops::DerefMut for MockObservations<M> {
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl<M> ::core::fmt::Debug for MockObservations<M> {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple(stringify!(MockObservations)).field(&self.address()).finish()
        }
    }
    impl<M: ::ethers::providers::Middleware> MockObservations<M> {
        /// Creates a new contract instance with the specified `ethers` client at
        /// `address`. The contract derefs to a `ethers::Contract` object.
        pub fn new<T: Into<::ethers::core::types::Address>>(
            address: T,
            client: ::std::sync::Arc<M>,
        ) -> Self {
            Self(
                ::ethers::contract::Contract::new(
                    address.into(),
                    MOCKOBSERVATIONS_ABI.clone(),
                    client,
                ),
            )
        }
        /// Constructs the general purpose `Deployer` instance based on the provided constructor arguments and sends it.
        /// Returns a new instance of a deployer that returns an instance of this contract after sending the transaction
        ///
        /// Notes:
        /// - If there are no constructor arguments, you should pass `()` as the argument.
        /// - The default poll duration is 7 seconds.
        /// - The default number of confirmations is 1 block.
        ///
        ///
        /// # Example
        ///
        /// Generate contract bindings with `abigen!` and deploy a new contract instance.
        ///
        /// *Note*: this requires a `bytecode` and `abi` object in the `greeter.json` artifact.
        ///
        /// ```ignore
        /// # async fn deploy<M: ethers::providers::Middleware>(client: ::std::sync::Arc<M>) {
        ///     abigen!(Greeter, "../greeter.json");
        ///
        ///    let greeter_contract = Greeter::deploy(client, "Hello world!".to_string()).unwrap().send().await.unwrap();
        ///    let msg = greeter_contract.greet().call().await.unwrap();
        /// # }
        /// ```
        pub fn deploy<T: ::ethers::core::abi::Tokenize>(
            client: ::std::sync::Arc<M>,
            constructor_args: T,
        ) -> ::core::result::Result<
            ::ethers::contract::builders::ContractDeployer<M, Self>,
            ::ethers::contract::ContractError<M>,
        > {
            let factory = ::ethers::contract::ContractFactory::new(
                MOCKOBSERVATIONS_ABI.clone(),
                MOCKOBSERVATIONS_BYTECODE.clone().into(),
                client,
            );
            let deployer = factory.deploy(constructor_args)?;
            let deployer = ::ethers::contract::ContractDeployer::new(deployer);
            Ok(deployer)
        }
        ///Calls the contract's `liquidity` (0x1a686502) function
        pub fn liquidity(&self) -> ::ethers::contract::builders::ContractCall<M, u128> {
            self.0
                .method_hash([26, 104, 101, 2], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `observations` (0x252c09d7) function
        pub fn observations(
            &self,
            index: ::ethers::core::types::U256,
        ) -> ::ethers::contract::builders::ContractCall<
            M,
            (u32, i64, ::ethers::core::types::U256, bool),
        > {
            self.0
                .method_hash([37, 44, 9, 215], index)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `slot0` (0x3850c7bd) function
        pub fn slot_0(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<
            M,
            (::ethers::core::types::U256, i32, u16, u16, u16, u8, bool),
        > {
            self.0
                .method_hash([56, 80, 199, 189], ())
                .expect("method not found (this should never happen)")
        }
    }
    impl<M: ::ethers::providers::Middleware> From<::ethers::contract::Contract<M>>
    for MockObservations<M> {
        fn from(contract: ::ethers::contract::Contract<M>) -> Self {
            Self::new(contract.address(), contract.client())
        }
    }
    ///Container type for all input parameters for the `liquidity` function with signature `liquidity()` and selector `0x1a686502`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "liquidity", abi = "liquidity()")]
    pub struct LiquidityCall;
    ///Container type for all input parameters for the `observations` function with signature `observations(uint256)` and selector `0x252c09d7`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "observations", abi = "observations(uint256)")]
    pub struct ObservationsCall {
        pub index: ::ethers::core::types::U256,
    }
    ///Container type for all input parameters for the `slot0` function with signature `slot0()` and selector `0x3850c7bd`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "slot0", abi = "slot0()")]
    pub struct Slot0Call;
    ///Container type for all of the contract's call
    #[derive(Clone, ::ethers::contract::EthAbiType, Debug, PartialEq, Eq, Hash)]
    pub enum MockObservationsCalls {
        Liquidity(LiquidityCall),
        Observations(ObservationsCall),
        Slot0(Slot0Call),
    }
    impl ::ethers::core::abi::AbiDecode for MockObservationsCalls {
        fn decode(
            data: impl AsRef<[u8]>,
        ) -> ::core::result::Result<Self, ::ethers::core::abi::AbiError> {
            let data = data.as_ref();
            if let Ok(decoded)
                = <LiquidityCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::Liquidity(decoded));
            }
            if let Ok(decoded)
                = <ObservationsCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::Observations(decoded));
            }
            if let Ok(decoded)
                = <Slot0Call as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::Slot0(decoded));
            }
            Err(::ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ::ethers::core::abi::AbiEncode for MockObservationsCalls {
        fn encode(self) -> Vec<u8> {
            match self {
                Self::Liquidity(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::Observations(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::Slot0(element) => ::ethers::core::abi::AbiEncode::encode(element),
            }
        }
    }
    impl ::core::fmt::Display for MockObservationsCalls {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
                Self::Liquidity(element) => ::core::fmt::Display::fmt(element, f),
                Self::Observations(element) => ::core::fmt::Display::fmt(element, f),
                Self::Slot0(element) => ::core::fmt::Display::fmt(element, f),
            }
        }
    }
    impl ::core::convert::From<LiquidityCall> for MockObservationsCalls {
        fn from(value: LiquidityCall) -> Self {
            Self::Liquidity(value)
        }
    }
    impl ::core::convert::From<ObservationsCall> for MockObservationsCalls {
        fn from(value: ObservationsCall) -> Self {
            Self::Observations(value)
        }
    }
    impl ::core::convert::From<Slot0Call> for MockObservationsCalls {
        fn from(value: Slot0Call) -> Self {
            Self::Slot0(value)
        }
    }
    ///Container type for all return fields from the `liquidity` function with signature `liquidity()` and selector `0x1a686502`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct LiquidityReturn(pub u128);
    ///Container type for all return fields from the `observations` function with signature `observations(uint256)` and selector `0x252c09d7`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct ObservationsReturn(
        pub u32,
        pub i64,
        pub ::ethers::core::types::U256,
        pub bool,
    );
    ///Container type for all return fields from the `slot0` function with signature `slot0()` and selector `0x3850c7bd`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct Slot0Return(
        pub ::ethers::core::types::U256,
        pub i32,
        pub u16,
        pub u16,
        pub u16,
        pub u8,
        pub bool,
    );
}
