pub use full_math_echidna_test::*;
/// This module was auto-generated with ethers-rs Abigen.
/// More information at: <https://github.com/gakonst/ethers-rs>
#[allow(
    clippy::enum_variant_names,
    clippy::too_many_arguments,
    clippy::upper_case_acronyms,
    clippy::type_complexity,
    dead_code,
    non_camel_case_types
)]
pub mod full_math_echidna_test {
    #[rustfmt::skip]
    const __ABI: &str = "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"pure\",\"type\":\"function\",\"name\":\"checkMulDiv\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"pure\",\"type\":\"function\",\"name\":\"checkMulDivRounding\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"pure\",\"type\":\"function\",\"name\":\"checkMulDivRoundingUp\",\"outputs\":[]}]";
    ///The parsed JSON ABI of the contract.
    pub static FULLMATHECHIDNATEST_ABI: ::ethers::contract::Lazy<::ethers::core::abi::Abi> =
        ::ethers::contract::Lazy::new(|| {
            ::ethers::core::utils::__serde_json::from_str(__ABI).expect("ABI is always valid")
        });
    #[rustfmt::skip]
    const __BYTECODE: &[u8] = &[
        96,
        128,
        96,
        64,
        82,
        52,
        128,
        21,
        97,
        0,
        16,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        97,
        3,
        73,
        128,
        97,
        0,
        32,
        96,
        0,
        57,
        96,
        0,
        243,
        254,
        96,
        128,
        96,
        64,
        82,
        52,
        128,
        21,
        97,
        0,
        16,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        96,
        4,
        54,
        16,
        97,
        0,
        65,
        87,
        96,
        0,
        53,
        96,
        224,
        28,
        128,
        99,
        105,
        83,
        99,
        163,
        20,
        97,
        0,
        70,
        87,
        128,
        99,
        121,
        238,
        228,
        135,
        20,
        97,
        0,
        113,
        87,
        128,
        99,
        191,
        8,
        195,
        145,
        20,
        97,
        0,
        154,
        87,
        91,
        96,
        0,
        128,
        253,
        91,
        97,
        0,
        111,
        96,
        4,
        128,
        54,
        3,
        96,
        96,
        129,
        16,
        21,
        97,
        0,
        92,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        128,
        53,
        144,
        96,
        32,
        129,
        1,
        53,
        144,
        96,
        64,
        1,
        53,
        97,
        0,
        195,
        86,
        91,
        0,
        91,
        97,
        0,
        111,
        96,
        4,
        128,
        54,
        3,
        96,
        96,
        129,
        16,
        21,
        97,
        0,
        135,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        128,
        53,
        144,
        96,
        32,
        129,
        1,
        53,
        144,
        96,
        64,
        1,
        53,
        97,
        1,
        34,
        86,
        91,
        97,
        0,
        111,
        96,
        4,
        128,
        54,
        3,
        96,
        96,
        129,
        16,
        21,
        97,
        0,
        176,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        128,
        53,
        144,
        96,
        32,
        129,
        1,
        53,
        144,
        96,
        64,
        1,
        53,
        97,
        1,
        173,
        86,
        91,
        96,
        0,
        129,
        17,
        97,
        0,
        208,
        87,
        96,
        0,
        128,
        253,
        91,
        96,
        0,
        97,
        0,
        221,
        132,
        132,
        132,
        97,
        2,
        41,
        86,
        91,
        144,
        80,
        96,
        0,
        97,
        0,
        236,
        133,
        133,
        133,
        97,
        2,
        100,
        86,
        91,
        144,
        80,
        96,
        0,
        131,
        128,
        97,
        0,
        248,
        87,
        254,
        91,
        133,
        135,
        9,
        17,
        21,
        97,
        1,
        18,
        87,
        128,
        130,
        3,
        96,
        1,
        20,
        97,
        1,
        13,
        87,
        254,
        91,
        97,
        1,
        27,
        86,
        91,
        128,
        130,
        20,
        97,
        1,
        27,
        87,
        254,
        91,
        80,
        80,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        129,
        17,
        97,
        1,
        47,
        87,
        96,
        0,
        128,
        253,
        91,
        96,
        0,
        97,
        1,
        60,
        132,
        132,
        132,
        97,
        2,
        41,
        86,
        91,
        144,
        80,
        131,
        21,
        128,
        97,
        1,
        73,
        87,
        80,
        130,
        21,
        91,
        21,
        97,
        1,
        92,
        87,
        128,
        21,
        97,
        1,
        86,
        87,
        254,
        91,
        80,
        97,
        1,
        168,
        86,
        91,
        96,
        0,
        97,
        1,
        105,
        130,
        132,
        134,
        97,
        2,
        100,
        86,
        91,
        144,
        80,
        96,
        0,
        97,
        1,
        120,
        131,
        133,
        136,
        97,
        2,
        100,
        86,
        91,
        144,
        80,
        133,
        130,
        16,
        21,
        97,
        1,
        132,
        87,
        254,
        91,
        132,
        129,
        16,
        21,
        97,
        1,
        142,
        87,
        254,
        91,
        131,
        134,
        131,
        3,
        16,
        97,
        1,
        153,
        87,
        254,
        91,
        131,
        133,
        130,
        3,
        16,
        97,
        1,
        164,
        87,
        254,
        91,
        80,
        80,
        80,
        91,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        129,
        17,
        97,
        1,
        186,
        87,
        96,
        0,
        128,
        253,
        91,
        96,
        0,
        97,
        1,
        199,
        132,
        132,
        132,
        97,
        2,
        100,
        86,
        91,
        144,
        80,
        131,
        21,
        128,
        97,
        1,
        212,
        87,
        80,
        130,
        21,
        91,
        21,
        97,
        1,
        225,
        87,
        128,
        21,
        97,
        1,
        86,
        87,
        254,
        91,
        96,
        0,
        97,
        1,
        238,
        130,
        132,
        134,
        97,
        2,
        100,
        86,
        91,
        144,
        80,
        96,
        0,
        97,
        1,
        253,
        131,
        133,
        136,
        97,
        2,
        100,
        86,
        91,
        144,
        80,
        133,
        130,
        17,
        21,
        97,
        2,
        9,
        87,
        254,
        91,
        132,
        129,
        17,
        21,
        97,
        2,
        19,
        87,
        254,
        91,
        131,
        130,
        135,
        3,
        16,
        97,
        2,
        30,
        87,
        254,
        91,
        131,
        129,
        134,
        3,
        16,
        97,
        1,
        164,
        87,
        254,
        91,
        96,
        0,
        97,
        2,
        54,
        132,
        132,
        132,
        97,
        2,
        100,
        86,
        91,
        144,
        80,
        96,
        0,
        130,
        128,
        97,
        2,
        66,
        87,
        254,
        91,
        132,
        134,
        9,
        17,
        21,
        97,
        2,
        93,
        87,
        96,
        0,
        25,
        129,
        16,
        97,
        2,
        89,
        87,
        96,
        0,
        128,
        253,
        91,
        96,
        1,
        1,
        91,
        147,
        146,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        128,
        128,
        96,
        0,
        25,
        133,
        135,
        9,
        134,
        134,
        2,
        146,
        80,
        130,
        129,
        16,
        144,
        131,
        144,
        3,
        3,
        144,
        80,
        128,
        97,
        2,
        154,
        87,
        96,
        0,
        132,
        17,
        97,
        2,
        143,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        130,
        144,
        4,
        144,
        80,
        97,
        2,
        93,
        86,
        91,
        128,
        132,
        17,
        97,
        2,
        166,
        87,
        96,
        0,
        128,
        253,
        91,
        96,
        0,
        132,
        134,
        136,
        9,
        96,
        0,
        134,
        129,
        3,
        135,
        22,
        150,
        135,
        144,
        4,
        150,
        96,
        2,
        96,
        3,
        137,
        2,
        129,
        24,
        128,
        138,
        2,
        130,
        3,
        2,
        128,
        138,
        2,
        130,
        3,
        2,
        128,
        138,
        2,
        130,
        3,
        2,
        128,
        138,
        2,
        130,
        3,
        2,
        128,
        138,
        2,
        130,
        3,
        2,
        128,
        138,
        2,
        144,
        145,
        3,
        2,
        145,
        129,
        144,
        3,
        129,
        144,
        4,
        96,
        1,
        1,
        134,
        132,
        17,
        144,
        149,
        3,
        148,
        144,
        148,
        2,
        145,
        144,
        148,
        3,
        146,
        144,
        146,
        4,
        145,
        144,
        145,
        23,
        145,
        144,
        145,
        2,
        145,
        80,
        80,
        147,
        146,
        80,
        80,
        80,
        86,
        254,
        162,
        100,
        105,
        112,
        102,
        115,
        88,
        34,
        18,
        32,
        206,
        107,
        123,
        125,
        190,
        38,
        8,
        109,
        247,
        79,
        124,
        183,
        148,
        124,
        219,
        210,
        0,
        29,
        4,
        146,
        72,
        38,
        145,
        8,
        29,
        196,
        201,
        12,
        74,
        4,
        180,
        76,
        100,
        115,
        111,
        108,
        99,
        67,
        0,
        7,
        6,
        0,
        51,
    ];
    ///The bytecode of the contract.
    pub static FULLMATHECHIDNATEST_BYTECODE: ::ethers::core::types::Bytes =
        ::ethers::core::types::Bytes::from_static(__BYTECODE);
    #[rustfmt::skip]
    const __DEPLOYED_BYTECODE: &[u8] = &[
        96,
        128,
        96,
        64,
        82,
        52,
        128,
        21,
        97,
        0,
        16,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        96,
        4,
        54,
        16,
        97,
        0,
        65,
        87,
        96,
        0,
        53,
        96,
        224,
        28,
        128,
        99,
        105,
        83,
        99,
        163,
        20,
        97,
        0,
        70,
        87,
        128,
        99,
        121,
        238,
        228,
        135,
        20,
        97,
        0,
        113,
        87,
        128,
        99,
        191,
        8,
        195,
        145,
        20,
        97,
        0,
        154,
        87,
        91,
        96,
        0,
        128,
        253,
        91,
        97,
        0,
        111,
        96,
        4,
        128,
        54,
        3,
        96,
        96,
        129,
        16,
        21,
        97,
        0,
        92,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        128,
        53,
        144,
        96,
        32,
        129,
        1,
        53,
        144,
        96,
        64,
        1,
        53,
        97,
        0,
        195,
        86,
        91,
        0,
        91,
        97,
        0,
        111,
        96,
        4,
        128,
        54,
        3,
        96,
        96,
        129,
        16,
        21,
        97,
        0,
        135,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        128,
        53,
        144,
        96,
        32,
        129,
        1,
        53,
        144,
        96,
        64,
        1,
        53,
        97,
        1,
        34,
        86,
        91,
        97,
        0,
        111,
        96,
        4,
        128,
        54,
        3,
        96,
        96,
        129,
        16,
        21,
        97,
        0,
        176,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        128,
        53,
        144,
        96,
        32,
        129,
        1,
        53,
        144,
        96,
        64,
        1,
        53,
        97,
        1,
        173,
        86,
        91,
        96,
        0,
        129,
        17,
        97,
        0,
        208,
        87,
        96,
        0,
        128,
        253,
        91,
        96,
        0,
        97,
        0,
        221,
        132,
        132,
        132,
        97,
        2,
        41,
        86,
        91,
        144,
        80,
        96,
        0,
        97,
        0,
        236,
        133,
        133,
        133,
        97,
        2,
        100,
        86,
        91,
        144,
        80,
        96,
        0,
        131,
        128,
        97,
        0,
        248,
        87,
        254,
        91,
        133,
        135,
        9,
        17,
        21,
        97,
        1,
        18,
        87,
        128,
        130,
        3,
        96,
        1,
        20,
        97,
        1,
        13,
        87,
        254,
        91,
        97,
        1,
        27,
        86,
        91,
        128,
        130,
        20,
        97,
        1,
        27,
        87,
        254,
        91,
        80,
        80,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        129,
        17,
        97,
        1,
        47,
        87,
        96,
        0,
        128,
        253,
        91,
        96,
        0,
        97,
        1,
        60,
        132,
        132,
        132,
        97,
        2,
        41,
        86,
        91,
        144,
        80,
        131,
        21,
        128,
        97,
        1,
        73,
        87,
        80,
        130,
        21,
        91,
        21,
        97,
        1,
        92,
        87,
        128,
        21,
        97,
        1,
        86,
        87,
        254,
        91,
        80,
        97,
        1,
        168,
        86,
        91,
        96,
        0,
        97,
        1,
        105,
        130,
        132,
        134,
        97,
        2,
        100,
        86,
        91,
        144,
        80,
        96,
        0,
        97,
        1,
        120,
        131,
        133,
        136,
        97,
        2,
        100,
        86,
        91,
        144,
        80,
        133,
        130,
        16,
        21,
        97,
        1,
        132,
        87,
        254,
        91,
        132,
        129,
        16,
        21,
        97,
        1,
        142,
        87,
        254,
        91,
        131,
        134,
        131,
        3,
        16,
        97,
        1,
        153,
        87,
        254,
        91,
        131,
        133,
        130,
        3,
        16,
        97,
        1,
        164,
        87,
        254,
        91,
        80,
        80,
        80,
        91,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        129,
        17,
        97,
        1,
        186,
        87,
        96,
        0,
        128,
        253,
        91,
        96,
        0,
        97,
        1,
        199,
        132,
        132,
        132,
        97,
        2,
        100,
        86,
        91,
        144,
        80,
        131,
        21,
        128,
        97,
        1,
        212,
        87,
        80,
        130,
        21,
        91,
        21,
        97,
        1,
        225,
        87,
        128,
        21,
        97,
        1,
        86,
        87,
        254,
        91,
        96,
        0,
        97,
        1,
        238,
        130,
        132,
        134,
        97,
        2,
        100,
        86,
        91,
        144,
        80,
        96,
        0,
        97,
        1,
        253,
        131,
        133,
        136,
        97,
        2,
        100,
        86,
        91,
        144,
        80,
        133,
        130,
        17,
        21,
        97,
        2,
        9,
        87,
        254,
        91,
        132,
        129,
        17,
        21,
        97,
        2,
        19,
        87,
        254,
        91,
        131,
        130,
        135,
        3,
        16,
        97,
        2,
        30,
        87,
        254,
        91,
        131,
        129,
        134,
        3,
        16,
        97,
        1,
        164,
        87,
        254,
        91,
        96,
        0,
        97,
        2,
        54,
        132,
        132,
        132,
        97,
        2,
        100,
        86,
        91,
        144,
        80,
        96,
        0,
        130,
        128,
        97,
        2,
        66,
        87,
        254,
        91,
        132,
        134,
        9,
        17,
        21,
        97,
        2,
        93,
        87,
        96,
        0,
        25,
        129,
        16,
        97,
        2,
        89,
        87,
        96,
        0,
        128,
        253,
        91,
        96,
        1,
        1,
        91,
        147,
        146,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        128,
        128,
        96,
        0,
        25,
        133,
        135,
        9,
        134,
        134,
        2,
        146,
        80,
        130,
        129,
        16,
        144,
        131,
        144,
        3,
        3,
        144,
        80,
        128,
        97,
        2,
        154,
        87,
        96,
        0,
        132,
        17,
        97,
        2,
        143,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        130,
        144,
        4,
        144,
        80,
        97,
        2,
        93,
        86,
        91,
        128,
        132,
        17,
        97,
        2,
        166,
        87,
        96,
        0,
        128,
        253,
        91,
        96,
        0,
        132,
        134,
        136,
        9,
        96,
        0,
        134,
        129,
        3,
        135,
        22,
        150,
        135,
        144,
        4,
        150,
        96,
        2,
        96,
        3,
        137,
        2,
        129,
        24,
        128,
        138,
        2,
        130,
        3,
        2,
        128,
        138,
        2,
        130,
        3,
        2,
        128,
        138,
        2,
        130,
        3,
        2,
        128,
        138,
        2,
        130,
        3,
        2,
        128,
        138,
        2,
        130,
        3,
        2,
        128,
        138,
        2,
        144,
        145,
        3,
        2,
        145,
        129,
        144,
        3,
        129,
        144,
        4,
        96,
        1,
        1,
        134,
        132,
        17,
        144,
        149,
        3,
        148,
        144,
        148,
        2,
        145,
        144,
        148,
        3,
        146,
        144,
        146,
        4,
        145,
        144,
        145,
        23,
        145,
        144,
        145,
        2,
        145,
        80,
        80,
        147,
        146,
        80,
        80,
        80,
        86,
        254,
        162,
        100,
        105,
        112,
        102,
        115,
        88,
        34,
        18,
        32,
        206,
        107,
        123,
        125,
        190,
        38,
        8,
        109,
        247,
        79,
        124,
        183,
        148,
        124,
        219,
        210,
        0,
        29,
        4,
        146,
        72,
        38,
        145,
        8,
        29,
        196,
        201,
        12,
        74,
        4,
        180,
        76,
        100,
        115,
        111,
        108,
        99,
        67,
        0,
        7,
        6,
        0,
        51,
    ];
    ///The deployed bytecode of the contract.
    pub static FULLMATHECHIDNATEST_DEPLOYED_BYTECODE: ::ethers::core::types::Bytes =
        ::ethers::core::types::Bytes::from_static(__DEPLOYED_BYTECODE);
    pub struct FullMathEchidnaTest<M>(::ethers::contract::Contract<M>);
    impl<M> ::core::clone::Clone for FullMathEchidnaTest<M> {
        fn clone(&self) -> Self {
            Self(::core::clone::Clone::clone(&self.0))
        }
    }
    impl<M> ::core::ops::Deref for FullMathEchidnaTest<M> {
        type Target = ::ethers::contract::Contract<M>;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl<M> ::core::ops::DerefMut for FullMathEchidnaTest<M> {
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl<M> ::core::fmt::Debug for FullMathEchidnaTest<M> {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple(stringify!(FullMathEchidnaTest))
                .field(&self.address())
                .finish()
        }
    }
    impl<M: ::ethers::providers::Middleware> FullMathEchidnaTest<M> {
        /// Creates a new contract instance with the specified `ethers` client at
        /// `address`. The contract derefs to a `ethers::Contract` object.
        pub fn new<T: Into<::ethers::core::types::Address>>(
            address: T,
            client: ::std::sync::Arc<M>,
        ) -> Self {
            Self(::ethers::contract::Contract::new(
                address.into(),
                FULLMATHECHIDNATEST_ABI.clone(),
                client,
            ))
        }
        /// Constructs the general purpose `Deployer` instance based on the provided constructor arguments and sends it.
        /// Returns a new instance of a deployer that returns an instance of this contract after sending the transaction
        ///
        /// Notes:
        /// - If there are no constructor arguments, you should pass `()` as the argument.
        /// - The default poll duration is 7 seconds.
        /// - The default number of confirmations is 1 block.
        ///
        ///
        /// # Example
        ///
        /// Generate contract bindings with `abigen!` and deploy a new contract instance.
        ///
        /// *Note*: this requires a `bytecode` and `abi` object in the `greeter.json` artifact.
        ///
        /// ```ignore
        /// # async fn deploy<M: ethers::providers::Middleware>(client: ::std::sync::Arc<M>) {
        ///     abigen!(Greeter, "../greeter.json");
        ///
        ///    let greeter_contract = Greeter::deploy(client, "Hello world!".to_string()).unwrap().send().await.unwrap();
        ///    let msg = greeter_contract.greet().call().await.unwrap();
        /// # }
        /// ```
        pub fn deploy<T: ::ethers::core::abi::Tokenize>(
            client: ::std::sync::Arc<M>,
            constructor_args: T,
        ) -> ::core::result::Result<
            ::ethers::contract::builders::ContractDeployer<M, Self>,
            ::ethers::contract::ContractError<M>,
        > {
            let factory = ::ethers::contract::ContractFactory::new(
                FULLMATHECHIDNATEST_ABI.clone(),
                FULLMATHECHIDNATEST_BYTECODE.clone().into(),
                client,
            );
            let deployer = factory.deploy(constructor_args)?;
            let deployer = ::ethers::contract::ContractDeployer::new(deployer);
            Ok(deployer)
        }
        ///Calls the contract's `checkMulDiv` (0xbf08c391) function
        pub fn check_mul_div(
            &self,
            x: ::ethers::core::types::U256,
            y: ::ethers::core::types::U256,
            d: ::ethers::core::types::U256,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([191, 8, 195, 145], (x, y, d))
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `checkMulDivRounding` (0x695363a3) function
        pub fn check_mul_div_rounding(
            &self,
            x: ::ethers::core::types::U256,
            y: ::ethers::core::types::U256,
            d: ::ethers::core::types::U256,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([105, 83, 99, 163], (x, y, d))
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `checkMulDivRoundingUp` (0x79eee487) function
        pub fn check_mul_div_rounding_up(
            &self,
            x: ::ethers::core::types::U256,
            y: ::ethers::core::types::U256,
            d: ::ethers::core::types::U256,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([121, 238, 228, 135], (x, y, d))
                .expect("method not found (this should never happen)")
        }
    }
    impl<M: ::ethers::providers::Middleware> From<::ethers::contract::Contract<M>>
        for FullMathEchidnaTest<M>
    {
        fn from(contract: ::ethers::contract::Contract<M>) -> Self {
            Self::new(contract.address(), contract.client())
        }
    }
    ///Container type for all input parameters for the `checkMulDiv` function with signature `checkMulDiv(uint256,uint256,uint256)` and selector `0xbf08c391`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    #[ethcall(name = "checkMulDiv", abi = "checkMulDiv(uint256,uint256,uint256)")]
    pub struct CheckMulDivCall {
        pub x: ::ethers::core::types::U256,
        pub y: ::ethers::core::types::U256,
        pub d: ::ethers::core::types::U256,
    }
    ///Container type for all input parameters for the `checkMulDivRounding` function with signature `checkMulDivRounding(uint256,uint256,uint256)` and selector `0x695363a3`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    #[ethcall(
        name = "checkMulDivRounding",
        abi = "checkMulDivRounding(uint256,uint256,uint256)"
    )]
    pub struct CheckMulDivRoundingCall {
        pub x: ::ethers::core::types::U256,
        pub y: ::ethers::core::types::U256,
        pub d: ::ethers::core::types::U256,
    }
    ///Container type for all input parameters for the `checkMulDivRoundingUp` function with signature `checkMulDivRoundingUp(uint256,uint256,uint256)` and selector `0x79eee487`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    #[ethcall(
        name = "checkMulDivRoundingUp",
        abi = "checkMulDivRoundingUp(uint256,uint256,uint256)"
    )]
    pub struct CheckMulDivRoundingUpCall {
        pub x: ::ethers::core::types::U256,
        pub y: ::ethers::core::types::U256,
        pub d: ::ethers::core::types::U256,
    }
    ///Container type for all of the contract's call
    #[derive(Clone, ::ethers::contract::EthAbiType, Debug, PartialEq, Eq, Hash)]
    pub enum FullMathEchidnaTestCalls {
        CheckMulDiv(CheckMulDivCall),
        CheckMulDivRounding(CheckMulDivRoundingCall),
        CheckMulDivRoundingUp(CheckMulDivRoundingUpCall),
    }
    impl ::ethers::core::abi::AbiDecode for FullMathEchidnaTestCalls {
        fn decode(
            data: impl AsRef<[u8]>,
        ) -> ::core::result::Result<Self, ::ethers::core::abi::AbiError> {
            let data = data.as_ref();
            if let Ok(decoded) = <CheckMulDivCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::CheckMulDiv(decoded));
            }
            if let Ok(decoded) =
                <CheckMulDivRoundingCall as ::ethers::core::abi::AbiDecode>::decode(data)
            {
                return Ok(Self::CheckMulDivRounding(decoded));
            }
            if let Ok(decoded) =
                <CheckMulDivRoundingUpCall as ::ethers::core::abi::AbiDecode>::decode(data)
            {
                return Ok(Self::CheckMulDivRoundingUp(decoded));
            }
            Err(::ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ::ethers::core::abi::AbiEncode for FullMathEchidnaTestCalls {
        fn encode(self) -> Vec<u8> {
            match self {
                Self::CheckMulDiv(element) => ::ethers::core::abi::AbiEncode::encode(element),
                Self::CheckMulDivRounding(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::CheckMulDivRoundingUp(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
            }
        }
    }
    impl ::core::fmt::Display for FullMathEchidnaTestCalls {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
                Self::CheckMulDiv(element) => ::core::fmt::Display::fmt(element, f),
                Self::CheckMulDivRounding(element) => ::core::fmt::Display::fmt(element, f),
                Self::CheckMulDivRoundingUp(element) => ::core::fmt::Display::fmt(element, f),
            }
        }
    }
    impl ::core::convert::From<CheckMulDivCall> for FullMathEchidnaTestCalls {
        fn from(value: CheckMulDivCall) -> Self {
            Self::CheckMulDiv(value)
        }
    }
    impl ::core::convert::From<CheckMulDivRoundingCall> for FullMathEchidnaTestCalls {
        fn from(value: CheckMulDivRoundingCall) -> Self {
            Self::CheckMulDivRounding(value)
        }
    }
    impl ::core::convert::From<CheckMulDivRoundingUpCall> for FullMathEchidnaTestCalls {
        fn from(value: CheckMulDivRoundingUpCall) -> Self {
            Self::CheckMulDivRoundingUp(value)
        }
    }
}
