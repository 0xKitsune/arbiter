pub use uniswap_interface_multicall::*;
/// This module was auto-generated with ethers-rs Abigen.
/// More information at: <https://github.com/gakonst/ethers-rs>
#[allow(
    clippy::enum_variant_names,
    clippy::too_many_arguments,
    clippy::upper_case_acronyms,
    clippy::type_complexity,
    dead_code,
    non_camel_case_types
)]
pub mod uniswap_interface_multicall {
    #[rustfmt::skip]
    const __ABI: &str = "[{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"getCurrentBlockTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"getEthBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"struct UniswapInterfaceMulticall.Call[]\",\"name\":\"calls\",\"type\":\"tuple[]\",\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\",\"components\":[]}]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"struct UniswapInterfaceMulticall.Result[]\",\"name\":\"returnData\",\"type\":\"tuple[]\",\"components\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"gasUsed\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\",\"components\":[]}]}]}]";
    ///The parsed JSON ABI of the contract.
    pub static UNISWAPINTERFACEMULTICALL_ABI: ::ethers::contract::Lazy<::ethers::core::abi::Abi> =
        ::ethers::contract::Lazy::new(|| {
            ::ethers::core::utils::__serde_json::from_str(__ABI).expect("ABI is always valid")
        });
    #[rustfmt::skip]
    const __BYTECODE: &[u8] = &[
        96,
        128,
        96,
        64,
        82,
        52,
        128,
        21,
        97,
        0,
        16,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        97,
        5,
        15,
        128,
        97,
        0,
        32,
        96,
        0,
        57,
        96,
        0,
        243,
        254,
        96,
        128,
        96,
        64,
        82,
        52,
        128,
        21,
        97,
        0,
        16,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        96,
        4,
        54,
        16,
        97,
        0,
        65,
        87,
        96,
        0,
        53,
        96,
        224,
        28,
        128,
        99,
        15,
        40,
        201,
        125,
        20,
        97,
        0,
        70,
        87,
        128,
        99,
        23,
        73,
        225,
        227,
        20,
        97,
        0,
        100,
        87,
        128,
        99,
        77,
        35,
        1,
        204,
        20,
        97,
        0,
        133,
        87,
        91,
        96,
        0,
        128,
        253,
        91,
        97,
        0,
        78,
        97,
        0,
        152,
        86,
        91,
        96,
        64,
        81,
        97,
        0,
        91,
        145,
        144,
        97,
        3,
        218,
        86,
        91,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        243,
        91,
        97,
        0,
        119,
        97,
        0,
        114,
        54,
        96,
        4,
        97,
        2,
        128,
        86,
        91,
        97,
        0,
        156,
        86,
        91,
        96,
        64,
        81,
        97,
        0,
        91,
        146,
        145,
        144,
        97,
        3,
        227,
        86,
        91,
        97,
        0,
        78,
        97,
        0,
        147,
        54,
        96,
        4,
        97,
        2,
        95,
        86,
        91,
        97,
        2,
        19,
        86,
        91,
        66,
        144,
        86,
        91,
        128,
        81,
        67,
        144,
        96,
        96,
        144,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        129,
        17,
        128,
        21,
        97,
        0,
        185,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        96,
        64,
        81,
        144,
        128,
        130,
        82,
        128,
        96,
        32,
        2,
        96,
        32,
        1,
        130,
        1,
        96,
        64,
        82,
        128,
        21,
        97,
        0,
        243,
        87,
        129,
        96,
        32,
        1,
        91,
        97,
        0,
        224,
        97,
        2,
        32,
        86,
        91,
        129,
        82,
        96,
        32,
        1,
        144,
        96,
        1,
        144,
        3,
        144,
        129,
        97,
        0,
        216,
        87,
        144,
        80,
        91,
        80,
        144,
        80,
        96,
        0,
        91,
        131,
        81,
        129,
        16,
        21,
        97,
        2,
        13,
        87,
        96,
        0,
        128,
        96,
        0,
        134,
        132,
        129,
        81,
        129,
        16,
        97,
        1,
        19,
        87,
        254,
        91,
        96,
        32,
        2,
        96,
        32,
        1,
        1,
        81,
        96,
        0,
        1,
        81,
        135,
        133,
        129,
        81,
        129,
        16,
        97,
        1,
        43,
        87,
        254,
        91,
        96,
        32,
        2,
        96,
        32,
        1,
        1,
        81,
        96,
        32,
        1,
        81,
        136,
        134,
        129,
        81,
        129,
        16,
        97,
        1,
        67,
        87,
        254,
        91,
        96,
        32,
        2,
        96,
        32,
        1,
        1,
        81,
        96,
        64,
        1,
        81,
        146,
        80,
        146,
        80,
        146,
        80,
        96,
        0,
        90,
        144,
        80,
        96,
        0,
        128,
        133,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        133,
        133,
        96,
        64,
        81,
        97,
        1,
        118,
        145,
        144,
        97,
        3,
        190,
        86,
        91,
        96,
        0,
        96,
        64,
        81,
        128,
        131,
        3,
        129,
        96,
        0,
        135,
        135,
        241,
        146,
        80,
        80,
        80,
        61,
        128,
        96,
        0,
        129,
        20,
        97,
        1,
        180,
        87,
        96,
        64,
        81,
        145,
        80,
        96,
        31,
        25,
        96,
        63,
        61,
        1,
        22,
        130,
        1,
        96,
        64,
        82,
        61,
        130,
        82,
        61,
        96,
        0,
        96,
        32,
        132,
        1,
        62,
        97,
        1,
        185,
        86,
        91,
        96,
        96,
        145,
        80,
        91,
        80,
        145,
        80,
        145,
        80,
        96,
        0,
        90,
        132,
        3,
        144,
        80,
        96,
        64,
        81,
        128,
        96,
        96,
        1,
        96,
        64,
        82,
        128,
        132,
        21,
        21,
        129,
        82,
        96,
        32,
        1,
        130,
        129,
        82,
        96,
        32,
        1,
        131,
        129,
        82,
        80,
        137,
        137,
        129,
        81,
        129,
        16,
        97,
        1,
        238,
        87,
        254,
        91,
        96,
        32,
        2,
        96,
        32,
        1,
        1,
        129,
        144,
        82,
        80,
        80,
        80,
        80,
        80,
        80,
        80,
        80,
        128,
        128,
        96,
        1,
        1,
        145,
        80,
        80,
        97,
        0,
        249,
        86,
        91,
        80,
        145,
        80,
        145,
        86,
        91,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        49,
        144,
        86,
        91,
        96,
        64,
        81,
        128,
        96,
        96,
        1,
        96,
        64,
        82,
        128,
        96,
        0,
        21,
        21,
        129,
        82,
        96,
        32,
        1,
        96,
        0,
        129,
        82,
        96,
        32,
        1,
        96,
        96,
        129,
        82,
        80,
        144,
        86,
        91,
        128,
        53,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        129,
        22,
        129,
        20,
        97,
        2,
        90,
        87,
        96,
        0,
        128,
        253,
        91,
        145,
        144,
        80,
        86,
        91,
        96,
        0,
        96,
        32,
        130,
        132,
        3,
        18,
        21,
        97,
        2,
        112,
        87,
        128,
        129,
        253,
        91,
        97,
        2,
        121,
        130,
        97,
        2,
        67,
        86,
        91,
        147,
        146,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        96,
        32,
        128,
        131,
        133,
        3,
        18,
        21,
        97,
        2,
        146,
        87,
        129,
        130,
        253,
        91,
        130,
        53,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        128,
        130,
        17,
        21,
        97,
        2,
        169,
        87,
        131,
        132,
        253,
        91,
        129,
        133,
        1,
        145,
        80,
        133,
        96,
        31,
        131,
        1,
        18,
        97,
        2,
        188,
        87,
        131,
        132,
        253,
        91,
        129,
        53,
        129,
        129,
        17,
        21,
        97,
        2,
        200,
        87,
        254,
        91,
        97,
        2,
        213,
        132,
        133,
        131,
        2,
        1,
        97,
        4,
        133,
        86,
        91,
        129,
        129,
        82,
        132,
        129,
        1,
        144,
        132,
        134,
        1,
        135,
        91,
        132,
        129,
        16,
        21,
        97,
        3,
        175,
        87,
        129,
        53,
        135,
        1,
        96,
        31,
        25,
        96,
        96,
        130,
        142,
        3,
        130,
        1,
        18,
        21,
        97,
        3,
        1,
        87,
        138,
        139,
        253,
        91,
        96,
        64,
        128,
        81,
        96,
        96,
        129,
        1,
        129,
        129,
        16,
        139,
        130,
        17,
        23,
        21,
        97,
        3,
        23,
        87,
        254,
        91,
        130,
        82,
        97,
        3,
        36,
        132,
        141,
        1,
        97,
        2,
        67,
        86,
        91,
        129,
        82,
        129,
        132,
        1,
        53,
        140,
        130,
        1,
        82,
        96,
        96,
        132,
        1,
        53,
        138,
        129,
        17,
        21,
        97,
        3,
        63,
        87,
        141,
        142,
        253,
        91,
        128,
        133,
        1,
        148,
        80,
        80,
        142,
        96,
        63,
        133,
        1,
        18,
        97,
        3,
        83,
        87,
        140,
        141,
        253,
        91,
        139,
        132,
        1,
        53,
        138,
        129,
        17,
        21,
        97,
        3,
        97,
        87,
        254,
        91,
        97,
        3,
        113,
        141,
        133,
        96,
        31,
        132,
        1,
        22,
        1,
        97,
        4,
        133,
        86,
        91,
        147,
        80,
        128,
        132,
        82,
        143,
        131,
        130,
        135,
        1,
        1,
        17,
        21,
        97,
        3,
        134,
        87,
        141,
        142,
        253,
        91,
        128,
        131,
        134,
        1,
        142,
        134,
        1,
        55,
        131,
        1,
        140,
        1,
        141,
        144,
        82,
        144,
        129,
        1,
        145,
        144,
        145,
        82,
        133,
        82,
        80,
        146,
        135,
        1,
        146,
        144,
        135,
        1,
        144,
        96,
        1,
        1,
        97,
        2,
        225,
        86,
        91,
        80,
        144,
        153,
        152,
        80,
        80,
        80,
        80,
        80,
        80,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        130,
        81,
        97,
        3,
        208,
        129,
        132,
        96,
        32,
        135,
        1,
        97,
        4,
        169,
        86,
        91,
        145,
        144,
        145,
        1,
        146,
        145,
        80,
        80,
        86,
        91,
        144,
        129,
        82,
        96,
        32,
        1,
        144,
        86,
        91,
        96,
        0,
        96,
        64,
        128,
        131,
        1,
        133,
        132,
        82,
        96,
        32,
        130,
        129,
        134,
        1,
        82,
        129,
        134,
        81,
        128,
        132,
        82,
        96,
        96,
        147,
        80,
        131,
        135,
        1,
        145,
        80,
        131,
        131,
        130,
        2,
        136,
        1,
        1,
        131,
        137,
        1,
        135,
        91,
        131,
        129,
        16,
        21,
        97,
        4,
        117,
        87,
        137,
        131,
        3,
        96,
        95,
        25,
        1,
        133,
        82,
        129,
        81,
        128,
        81,
        21,
        21,
        132,
        82,
        134,
        129,
        1,
        81,
        135,
        133,
        1,
        82,
        136,
        1,
        81,
        136,
        132,
        1,
        136,
        144,
        82,
        128,
        81,
        136,
        133,
        1,
        129,
        144,
        82,
        96,
        128,
        97,
        4,
        82,
        130,
        130,
        136,
        1,
        133,
        140,
        1,
        97,
        4,
        169,
        86,
        91,
        150,
        136,
        1,
        150,
        96,
        31,
        145,
        144,
        145,
        1,
        96,
        31,
        25,
        22,
        148,
        144,
        148,
        1,
        144,
        147,
        1,
        146,
        80,
        144,
        133,
        1,
        144,
        96,
        1,
        1,
        97,
        4,
        15,
        86,
        91,
        80,
        144,
        154,
        153,
        80,
        80,
        80,
        80,
        80,
        80,
        80,
        80,
        80,
        80,
        86,
        91,
        96,
        64,
        81,
        129,
        129,
        1,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        129,
        17,
        130,
        130,
        16,
        23,
        21,
        97,
        4,
        161,
        87,
        254,
        91,
        96,
        64,
        82,
        145,
        144,
        80,
        86,
        91,
        96,
        0,
        91,
        131,
        129,
        16,
        21,
        97,
        4,
        196,
        87,
        129,
        129,
        1,
        81,
        131,
        130,
        1,
        82,
        96,
        32,
        1,
        97,
        4,
        172,
        86,
        91,
        131,
        129,
        17,
        21,
        97,
        4,
        211,
        87,
        96,
        0,
        132,
        132,
        1,
        82,
        91,
        80,
        80,
        80,
        80,
        86,
        254,
        162,
        100,
        105,
        112,
        102,
        115,
        88,
        34,
        18,
        32,
        182,
        17,
        170,
        12,
        45,
        27,
        119,
        52,
        191,
        26,
        143,
        176,
        2,
        129,
        9,
        113,
        19,
        130,
        143,
        210,
        104,
        241,
        19,
        28,
        134,
        42,
        106,
        131,
        86,
        106,
        9,
        251,
        100,
        115,
        111,
        108,
        99,
        67,
        0,
        7,
        6,
        0,
        51,
    ];
    ///The bytecode of the contract.
    pub static UNISWAPINTERFACEMULTICALL_BYTECODE: ::ethers::core::types::Bytes =
        ::ethers::core::types::Bytes::from_static(__BYTECODE);
    #[rustfmt::skip]
    const __DEPLOYED_BYTECODE: &[u8] = &[
        96,
        128,
        96,
        64,
        82,
        52,
        128,
        21,
        97,
        0,
        16,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        96,
        4,
        54,
        16,
        97,
        0,
        65,
        87,
        96,
        0,
        53,
        96,
        224,
        28,
        128,
        99,
        15,
        40,
        201,
        125,
        20,
        97,
        0,
        70,
        87,
        128,
        99,
        23,
        73,
        225,
        227,
        20,
        97,
        0,
        100,
        87,
        128,
        99,
        77,
        35,
        1,
        204,
        20,
        97,
        0,
        133,
        87,
        91,
        96,
        0,
        128,
        253,
        91,
        97,
        0,
        78,
        97,
        0,
        152,
        86,
        91,
        96,
        64,
        81,
        97,
        0,
        91,
        145,
        144,
        97,
        3,
        218,
        86,
        91,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        243,
        91,
        97,
        0,
        119,
        97,
        0,
        114,
        54,
        96,
        4,
        97,
        2,
        128,
        86,
        91,
        97,
        0,
        156,
        86,
        91,
        96,
        64,
        81,
        97,
        0,
        91,
        146,
        145,
        144,
        97,
        3,
        227,
        86,
        91,
        97,
        0,
        78,
        97,
        0,
        147,
        54,
        96,
        4,
        97,
        2,
        95,
        86,
        91,
        97,
        2,
        19,
        86,
        91,
        66,
        144,
        86,
        91,
        128,
        81,
        67,
        144,
        96,
        96,
        144,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        129,
        17,
        128,
        21,
        97,
        0,
        185,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        96,
        64,
        81,
        144,
        128,
        130,
        82,
        128,
        96,
        32,
        2,
        96,
        32,
        1,
        130,
        1,
        96,
        64,
        82,
        128,
        21,
        97,
        0,
        243,
        87,
        129,
        96,
        32,
        1,
        91,
        97,
        0,
        224,
        97,
        2,
        32,
        86,
        91,
        129,
        82,
        96,
        32,
        1,
        144,
        96,
        1,
        144,
        3,
        144,
        129,
        97,
        0,
        216,
        87,
        144,
        80,
        91,
        80,
        144,
        80,
        96,
        0,
        91,
        131,
        81,
        129,
        16,
        21,
        97,
        2,
        13,
        87,
        96,
        0,
        128,
        96,
        0,
        134,
        132,
        129,
        81,
        129,
        16,
        97,
        1,
        19,
        87,
        254,
        91,
        96,
        32,
        2,
        96,
        32,
        1,
        1,
        81,
        96,
        0,
        1,
        81,
        135,
        133,
        129,
        81,
        129,
        16,
        97,
        1,
        43,
        87,
        254,
        91,
        96,
        32,
        2,
        96,
        32,
        1,
        1,
        81,
        96,
        32,
        1,
        81,
        136,
        134,
        129,
        81,
        129,
        16,
        97,
        1,
        67,
        87,
        254,
        91,
        96,
        32,
        2,
        96,
        32,
        1,
        1,
        81,
        96,
        64,
        1,
        81,
        146,
        80,
        146,
        80,
        146,
        80,
        96,
        0,
        90,
        144,
        80,
        96,
        0,
        128,
        133,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        133,
        133,
        96,
        64,
        81,
        97,
        1,
        118,
        145,
        144,
        97,
        3,
        190,
        86,
        91,
        96,
        0,
        96,
        64,
        81,
        128,
        131,
        3,
        129,
        96,
        0,
        135,
        135,
        241,
        146,
        80,
        80,
        80,
        61,
        128,
        96,
        0,
        129,
        20,
        97,
        1,
        180,
        87,
        96,
        64,
        81,
        145,
        80,
        96,
        31,
        25,
        96,
        63,
        61,
        1,
        22,
        130,
        1,
        96,
        64,
        82,
        61,
        130,
        82,
        61,
        96,
        0,
        96,
        32,
        132,
        1,
        62,
        97,
        1,
        185,
        86,
        91,
        96,
        96,
        145,
        80,
        91,
        80,
        145,
        80,
        145,
        80,
        96,
        0,
        90,
        132,
        3,
        144,
        80,
        96,
        64,
        81,
        128,
        96,
        96,
        1,
        96,
        64,
        82,
        128,
        132,
        21,
        21,
        129,
        82,
        96,
        32,
        1,
        130,
        129,
        82,
        96,
        32,
        1,
        131,
        129,
        82,
        80,
        137,
        137,
        129,
        81,
        129,
        16,
        97,
        1,
        238,
        87,
        254,
        91,
        96,
        32,
        2,
        96,
        32,
        1,
        1,
        129,
        144,
        82,
        80,
        80,
        80,
        80,
        80,
        80,
        80,
        80,
        128,
        128,
        96,
        1,
        1,
        145,
        80,
        80,
        97,
        0,
        249,
        86,
        91,
        80,
        145,
        80,
        145,
        86,
        91,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        49,
        144,
        86,
        91,
        96,
        64,
        81,
        128,
        96,
        96,
        1,
        96,
        64,
        82,
        128,
        96,
        0,
        21,
        21,
        129,
        82,
        96,
        32,
        1,
        96,
        0,
        129,
        82,
        96,
        32,
        1,
        96,
        96,
        129,
        82,
        80,
        144,
        86,
        91,
        128,
        53,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        129,
        22,
        129,
        20,
        97,
        2,
        90,
        87,
        96,
        0,
        128,
        253,
        91,
        145,
        144,
        80,
        86,
        91,
        96,
        0,
        96,
        32,
        130,
        132,
        3,
        18,
        21,
        97,
        2,
        112,
        87,
        128,
        129,
        253,
        91,
        97,
        2,
        121,
        130,
        97,
        2,
        67,
        86,
        91,
        147,
        146,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        96,
        32,
        128,
        131,
        133,
        3,
        18,
        21,
        97,
        2,
        146,
        87,
        129,
        130,
        253,
        91,
        130,
        53,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        128,
        130,
        17,
        21,
        97,
        2,
        169,
        87,
        131,
        132,
        253,
        91,
        129,
        133,
        1,
        145,
        80,
        133,
        96,
        31,
        131,
        1,
        18,
        97,
        2,
        188,
        87,
        131,
        132,
        253,
        91,
        129,
        53,
        129,
        129,
        17,
        21,
        97,
        2,
        200,
        87,
        254,
        91,
        97,
        2,
        213,
        132,
        133,
        131,
        2,
        1,
        97,
        4,
        133,
        86,
        91,
        129,
        129,
        82,
        132,
        129,
        1,
        144,
        132,
        134,
        1,
        135,
        91,
        132,
        129,
        16,
        21,
        97,
        3,
        175,
        87,
        129,
        53,
        135,
        1,
        96,
        31,
        25,
        96,
        96,
        130,
        142,
        3,
        130,
        1,
        18,
        21,
        97,
        3,
        1,
        87,
        138,
        139,
        253,
        91,
        96,
        64,
        128,
        81,
        96,
        96,
        129,
        1,
        129,
        129,
        16,
        139,
        130,
        17,
        23,
        21,
        97,
        3,
        23,
        87,
        254,
        91,
        130,
        82,
        97,
        3,
        36,
        132,
        141,
        1,
        97,
        2,
        67,
        86,
        91,
        129,
        82,
        129,
        132,
        1,
        53,
        140,
        130,
        1,
        82,
        96,
        96,
        132,
        1,
        53,
        138,
        129,
        17,
        21,
        97,
        3,
        63,
        87,
        141,
        142,
        253,
        91,
        128,
        133,
        1,
        148,
        80,
        80,
        142,
        96,
        63,
        133,
        1,
        18,
        97,
        3,
        83,
        87,
        140,
        141,
        253,
        91,
        139,
        132,
        1,
        53,
        138,
        129,
        17,
        21,
        97,
        3,
        97,
        87,
        254,
        91,
        97,
        3,
        113,
        141,
        133,
        96,
        31,
        132,
        1,
        22,
        1,
        97,
        4,
        133,
        86,
        91,
        147,
        80,
        128,
        132,
        82,
        143,
        131,
        130,
        135,
        1,
        1,
        17,
        21,
        97,
        3,
        134,
        87,
        141,
        142,
        253,
        91,
        128,
        131,
        134,
        1,
        142,
        134,
        1,
        55,
        131,
        1,
        140,
        1,
        141,
        144,
        82,
        144,
        129,
        1,
        145,
        144,
        145,
        82,
        133,
        82,
        80,
        146,
        135,
        1,
        146,
        144,
        135,
        1,
        144,
        96,
        1,
        1,
        97,
        2,
        225,
        86,
        91,
        80,
        144,
        153,
        152,
        80,
        80,
        80,
        80,
        80,
        80,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        130,
        81,
        97,
        3,
        208,
        129,
        132,
        96,
        32,
        135,
        1,
        97,
        4,
        169,
        86,
        91,
        145,
        144,
        145,
        1,
        146,
        145,
        80,
        80,
        86,
        91,
        144,
        129,
        82,
        96,
        32,
        1,
        144,
        86,
        91,
        96,
        0,
        96,
        64,
        128,
        131,
        1,
        133,
        132,
        82,
        96,
        32,
        130,
        129,
        134,
        1,
        82,
        129,
        134,
        81,
        128,
        132,
        82,
        96,
        96,
        147,
        80,
        131,
        135,
        1,
        145,
        80,
        131,
        131,
        130,
        2,
        136,
        1,
        1,
        131,
        137,
        1,
        135,
        91,
        131,
        129,
        16,
        21,
        97,
        4,
        117,
        87,
        137,
        131,
        3,
        96,
        95,
        25,
        1,
        133,
        82,
        129,
        81,
        128,
        81,
        21,
        21,
        132,
        82,
        134,
        129,
        1,
        81,
        135,
        133,
        1,
        82,
        136,
        1,
        81,
        136,
        132,
        1,
        136,
        144,
        82,
        128,
        81,
        136,
        133,
        1,
        129,
        144,
        82,
        96,
        128,
        97,
        4,
        82,
        130,
        130,
        136,
        1,
        133,
        140,
        1,
        97,
        4,
        169,
        86,
        91,
        150,
        136,
        1,
        150,
        96,
        31,
        145,
        144,
        145,
        1,
        96,
        31,
        25,
        22,
        148,
        144,
        148,
        1,
        144,
        147,
        1,
        146,
        80,
        144,
        133,
        1,
        144,
        96,
        1,
        1,
        97,
        4,
        15,
        86,
        91,
        80,
        144,
        154,
        153,
        80,
        80,
        80,
        80,
        80,
        80,
        80,
        80,
        80,
        80,
        86,
        91,
        96,
        64,
        81,
        129,
        129,
        1,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        129,
        17,
        130,
        130,
        16,
        23,
        21,
        97,
        4,
        161,
        87,
        254,
        91,
        96,
        64,
        82,
        145,
        144,
        80,
        86,
        91,
        96,
        0,
        91,
        131,
        129,
        16,
        21,
        97,
        4,
        196,
        87,
        129,
        129,
        1,
        81,
        131,
        130,
        1,
        82,
        96,
        32,
        1,
        97,
        4,
        172,
        86,
        91,
        131,
        129,
        17,
        21,
        97,
        4,
        211,
        87,
        96,
        0,
        132,
        132,
        1,
        82,
        91,
        80,
        80,
        80,
        80,
        86,
        254,
        162,
        100,
        105,
        112,
        102,
        115,
        88,
        34,
        18,
        32,
        182,
        17,
        170,
        12,
        45,
        27,
        119,
        52,
        191,
        26,
        143,
        176,
        2,
        129,
        9,
        113,
        19,
        130,
        143,
        210,
        104,
        241,
        19,
        28,
        134,
        42,
        106,
        131,
        86,
        106,
        9,
        251,
        100,
        115,
        111,
        108,
        99,
        67,
        0,
        7,
        6,
        0,
        51,
    ];
    ///The deployed bytecode of the contract.
    pub static UNISWAPINTERFACEMULTICALL_DEPLOYED_BYTECODE: ::ethers::core::types::Bytes =
        ::ethers::core::types::Bytes::from_static(__DEPLOYED_BYTECODE);
    pub struct UniswapInterfaceMulticall<M>(::ethers::contract::Contract<M>);
    impl<M> ::core::clone::Clone for UniswapInterfaceMulticall<M> {
        fn clone(&self) -> Self {
            Self(::core::clone::Clone::clone(&self.0))
        }
    }
    impl<M> ::core::ops::Deref for UniswapInterfaceMulticall<M> {
        type Target = ::ethers::contract::Contract<M>;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl<M> ::core::ops::DerefMut for UniswapInterfaceMulticall<M> {
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl<M> ::core::fmt::Debug for UniswapInterfaceMulticall<M> {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple(stringify!(UniswapInterfaceMulticall))
                .field(&self.address())
                .finish()
        }
    }
    impl<M: ::ethers::providers::Middleware> UniswapInterfaceMulticall<M> {
        /// Creates a new contract instance with the specified `ethers` client at
        /// `address`. The contract derefs to a `ethers::Contract` object.
        pub fn new<T: Into<::ethers::core::types::Address>>(
            address: T,
            client: ::std::sync::Arc<M>,
        ) -> Self {
            Self(::ethers::contract::Contract::new(
                address.into(),
                UNISWAPINTERFACEMULTICALL_ABI.clone(),
                client,
            ))
        }
        /// Constructs the general purpose `Deployer` instance based on the provided constructor arguments and sends it.
        /// Returns a new instance of a deployer that returns an instance of this contract after sending the transaction
        ///
        /// Notes:
        /// - If there are no constructor arguments, you should pass `()` as the argument.
        /// - The default poll duration is 7 seconds.
        /// - The default number of confirmations is 1 block.
        ///
        ///
        /// # Example
        ///
        /// Generate contract bindings with `abigen!` and deploy a new contract instance.
        ///
        /// *Note*: this requires a `bytecode` and `abi` object in the `greeter.json` artifact.
        ///
        /// ```ignore
        /// # async fn deploy<M: ethers::providers::Middleware>(client: ::std::sync::Arc<M>) {
        ///     abigen!(Greeter, "../greeter.json");
        ///
        ///    let greeter_contract = Greeter::deploy(client, "Hello world!".to_string()).unwrap().send().await.unwrap();
        ///    let msg = greeter_contract.greet().call().await.unwrap();
        /// # }
        /// ```
        pub fn deploy<T: ::ethers::core::abi::Tokenize>(
            client: ::std::sync::Arc<M>,
            constructor_args: T,
        ) -> ::core::result::Result<
            ::ethers::contract::builders::ContractDeployer<M, Self>,
            ::ethers::contract::ContractError<M>,
        > {
            let factory = ::ethers::contract::ContractFactory::new(
                UNISWAPINTERFACEMULTICALL_ABI.clone(),
                UNISWAPINTERFACEMULTICALL_BYTECODE.clone().into(),
                client,
            );
            let deployer = factory.deploy(constructor_args)?;
            let deployer = ::ethers::contract::ContractDeployer::new(deployer);
            Ok(deployer)
        }
        ///Calls the contract's `getCurrentBlockTimestamp` (0x0f28c97d) function
        pub fn get_current_block_timestamp(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash([15, 40, 201, 125], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `getEthBalance` (0x4d2301cc) function
        pub fn get_eth_balance(
            &self,
            addr: ::ethers::core::types::Address,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash([77, 35, 1, 204], addr)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `multicall` (0x1749e1e3) function
        pub fn multicall(
            &self,
            calls: ::std::vec::Vec<Call>,
        ) -> ::ethers::contract::builders::ContractCall<
            M,
            (::ethers::core::types::U256, ::std::vec::Vec<Result>),
        > {
            self.0
                .method_hash([23, 73, 225, 227], calls)
                .expect("method not found (this should never happen)")
        }
    }
    impl<M: ::ethers::providers::Middleware> From<::ethers::contract::Contract<M>>
        for UniswapInterfaceMulticall<M>
    {
        fn from(contract: ::ethers::contract::Contract<M>) -> Self {
            Self::new(contract.address(), contract.client())
        }
    }
    ///Container type for all input parameters for the `getCurrentBlockTimestamp` function with signature `getCurrentBlockTimestamp()` and selector `0x0f28c97d`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    #[ethcall(name = "getCurrentBlockTimestamp", abi = "getCurrentBlockTimestamp()")]
    pub struct GetCurrentBlockTimestampCall;
    ///Container type for all input parameters for the `getEthBalance` function with signature `getEthBalance(address)` and selector `0x4d2301cc`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    #[ethcall(name = "getEthBalance", abi = "getEthBalance(address)")]
    pub struct GetEthBalanceCall {
        pub addr: ::ethers::core::types::Address,
    }
    ///Container type for all input parameters for the `multicall` function with signature `multicall((address,uint256,bytes)[])` and selector `0x1749e1e3`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    #[ethcall(name = "multicall", abi = "multicall((address,uint256,bytes)[])")]
    pub struct MulticallCall {
        pub calls: ::std::vec::Vec<Call>,
    }
    ///Container type for all of the contract's call
    #[derive(Clone, ::ethers::contract::EthAbiType, Debug, PartialEq, Eq, Hash)]
    pub enum UniswapInterfaceMulticallCalls {
        GetCurrentBlockTimestamp(GetCurrentBlockTimestampCall),
        GetEthBalance(GetEthBalanceCall),
        Multicall(MulticallCall),
    }
    impl ::ethers::core::abi::AbiDecode for UniswapInterfaceMulticallCalls {
        fn decode(
            data: impl AsRef<[u8]>,
        ) -> ::core::result::Result<Self, ::ethers::core::abi::AbiError> {
            let data = data.as_ref();
            if let Ok(decoded) =
                <GetCurrentBlockTimestampCall as ::ethers::core::abi::AbiDecode>::decode(data)
            {
                return Ok(Self::GetCurrentBlockTimestamp(decoded));
            }
            if let Ok(decoded) = <GetEthBalanceCall as ::ethers::core::abi::AbiDecode>::decode(data)
            {
                return Ok(Self::GetEthBalance(decoded));
            }
            if let Ok(decoded) = <MulticallCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::Multicall(decoded));
            }
            Err(::ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ::ethers::core::abi::AbiEncode for UniswapInterfaceMulticallCalls {
        fn encode(self) -> Vec<u8> {
            match self {
                Self::GetCurrentBlockTimestamp(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::GetEthBalance(element) => ::ethers::core::abi::AbiEncode::encode(element),
                Self::Multicall(element) => ::ethers::core::abi::AbiEncode::encode(element),
            }
        }
    }
    impl ::core::fmt::Display for UniswapInterfaceMulticallCalls {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
                Self::GetCurrentBlockTimestamp(element) => ::core::fmt::Display::fmt(element, f),
                Self::GetEthBalance(element) => ::core::fmt::Display::fmt(element, f),
                Self::Multicall(element) => ::core::fmt::Display::fmt(element, f),
            }
        }
    }
    impl ::core::convert::From<GetCurrentBlockTimestampCall> for UniswapInterfaceMulticallCalls {
        fn from(value: GetCurrentBlockTimestampCall) -> Self {
            Self::GetCurrentBlockTimestamp(value)
        }
    }
    impl ::core::convert::From<GetEthBalanceCall> for UniswapInterfaceMulticallCalls {
        fn from(value: GetEthBalanceCall) -> Self {
            Self::GetEthBalance(value)
        }
    }
    impl ::core::convert::From<MulticallCall> for UniswapInterfaceMulticallCalls {
        fn from(value: MulticallCall) -> Self {
            Self::Multicall(value)
        }
    }
    ///Container type for all return fields from the `getCurrentBlockTimestamp` function with signature `getCurrentBlockTimestamp()` and selector `0x0f28c97d`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    pub struct GetCurrentBlockTimestampReturn {
        pub timestamp: ::ethers::core::types::U256,
    }
    ///Container type for all return fields from the `getEthBalance` function with signature `getEthBalance(address)` and selector `0x4d2301cc`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    pub struct GetEthBalanceReturn {
        pub balance: ::ethers::core::types::U256,
    }
    ///Container type for all return fields from the `multicall` function with signature `multicall((address,uint256,bytes)[])` and selector `0x1749e1e3`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    pub struct MulticallReturn {
        pub block_number: ::ethers::core::types::U256,
        pub return_data: ::std::vec::Vec<Result>,
    }
    ///`Call(address,uint256,bytes)`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    pub struct Call {
        pub target: ::ethers::core::types::Address,
        pub gas_limit: ::ethers::core::types::U256,
        pub call_data: ::ethers::core::types::Bytes,
    }
    ///`Result(bool,uint256,bytes)`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    pub struct Result {
        pub success: bool,
        pub gas_used: ::ethers::core::types::U256,
        pub return_data: ::ethers::core::types::Bytes,
    }
}
